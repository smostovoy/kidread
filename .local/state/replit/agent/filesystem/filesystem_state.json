{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Kidread - Russian Reading Game App\n\n## Overview\n\nThis is a child-friendly Russian reading game built with React, TypeScript, Express.js, and Drizzle ORM. The app teaches children to read Russian words by matching them with corresponding pictures. It features an interactive game interface with audio pronunciation, visual feedback, and progress tracking. The game now includes 40 common Russian words with emoji-based picture representations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Architecture\n- **Frontend**: React 18 with TypeScript, using Vite as the build tool\n- **Backend**: Express.js server with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM (configured for Neon Database)\n- **UI Framework**: shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack React Query for server state\n- **Routing**: Wouter for client-side routing\n- **Animations**: Framer Motion for smooth UI transitions\n\n### Monorepo Structure\nThe project uses a monorepo structure with shared types and schemas:\n- `client/` - React frontend application\n- `server/` - Express.js backend API\n- `shared/` - Shared TypeScript types and database schemas\n- `migrations/` - Database migration files\n\n## Key Components\n\n### Frontend Components\n- **Game**: Main game interface with word display and picture selection\n- **GameHeader**: Progress tracking and navigation\n- **GameMenu**: Icon-based navigation between 5 game modes (üñºÔ∏è ‚ûï üóëÔ∏è ‚úèÔ∏è üé≤)\n- **WordDisplay**: Interactive letter buttons with audio pronunciation\n- **PictureGrid**: Grid of picture options for word matching\n- **MissingLetterGame**: Fill-in-the-blank letter challenges with drag & drop\n- **ExtraLetterGame**: Remove unwanted letters with trash can interaction\n- **SpellWordGame**: Letter sequence spelling from picture cues\n- **MixGame**: Random game type selector that varies each word\n- **CelebrationOverlay**: Success animations and feedback\n- **Audio Hook**: Russian audio files with Web Speech API fallback\n\n### Backend Architecture\n- **Express Server**: RESTful API with middleware for logging and error handling\n- **Storage Layer**: PostgreSQL database with Drizzle ORM for persistent storage\n- **Route Handlers**: CRUD operations for words, game progress, and answer tracking\n- **Development Server**: Integrated Vite development server with HMR\n\n### Database Schema\n- **Words Table**: Stores 40 Russian words including simple nouns like animals, household items, nature elements, and transportation\n- **User Answers Table**: Tracks all user answers with timestamps for monthly filtering\n- **Game Progress Table**: Tracks user progress through game sessions\n- **Shared Types**: TypeScript interfaces generated from Drizzle schemas\n\n## Data Flow\n\n1. **Game Initialization**: Frontend fetches word list from `/api/words`\n2. **Word Selection**: Random word chosen from available words\n3. **Distractor Generation**: Backend provides incorrect options via `/api/words/:id/distractors`\n4. **User Interaction**: Picture selection triggers validation and feedback\n5. **Progress Tracking**: Game state managed locally with optional backend sync\n6. **Audio Feedback**: Web Speech API provides Russian pronunciation\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL database connection\n- **drizzle-orm**: Type-safe database ORM with PostgreSQL dialect\n- **@tanstack/react-query**: Server state management and caching\n- **framer-motion**: Animation library for smooth UI transitions\n- **@radix-ui/***: Accessible UI component primitives\n\n### Development Tools\n- **Vite**: Fast build tool with TypeScript support\n- **ESBuild**: Production build bundling for server code\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library\n\n### Audio System\n- **Unified Audio Function**: Single `playLetterSound` function in `useAudio` hook used across all games\n- **Russian Audio Files**: Located in `/client/public/audio/letters/—Ä–æ—Å/` with uppercase filenames (–ê.mp3, –ë.mp3, etc.)\n- **Web Speech API Fallback**: Browser-native Russian text-to-speech when audio files unavailable\n- **Consistent Implementation**: All games use the same audio logic for letter pronunciation\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds React app to `dist/public/`\n- **Backend**: ESBuild bundles Express server to `dist/index.js`\n- **Database**: Drizzle migrations run via `npm run db:push`\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **NODE_ENV**: Environment mode (development/production)\n- **REPL_ID**: Replit-specific development features\n\n### Development Workflow\n- **Hot Module Replacement**: Vite provides instant frontend updates\n- **Server Restart**: tsx enables TypeScript execution with auto-restart\n- **Database Sync**: Drizzle push for schema synchronization\n\n### Production Considerations\n- Server-side rendering disabled (CSR only)\n- Static asset serving from Express in production\n- Error handling with proper HTTP status codes\n- Request logging and performance monitoring\n\n## Game Features\n\n### Game Modes\n- **Picture Matching Mode**: Classic word-to-picture matching with emoji representations\n- **Missing Letter Mode**: Fill-in-the-blank style gameplay where children identify missing letters\n- **Extra Letter Mode**: Identify and remove the extra letter inserted into a word\n- **Spell Word Mode**: Look at picture and spell the word by selecting letters from 10 available options\n- **Mix Mode**: Each new word randomly selects one of the four game types for varied learning experience\n- **Game Menu**: Toggle between five different game types via top navigation buttons with intuitive icons\n\n### Educational Design\n- **Child-Friendly Interface**: Large buttons, bright colors, emoji icons\n- **Russian Language Support**: Cyrillic characters with phonetic audio\n- **Progressive Difficulty**: Starts with simple 3-letter words\n- **Immediate Feedback**: Visual and audio responses to user actions\n- **Smart Progression**: Words answered correctly are excluded for 30 days to focus on challenging vocabulary\n\n### Interactive Elements\n- **Clickable Letters**: Each letter plays pronunciation sound in all game modes\n- **Picture Matching**: Visual word-to-image association\n- **Missing Letter Challenges**: Choose correct letter from 4 options to complete words\n- **Extra Letter Removal**: Click on incorrect letters to identify and remove them\n- **Word Spelling**: Select letters in sequence to spell words based on pictures\n- **Mixed Game Experience**: Random game type selection for each word in mix mode\n- **Celebration Animations**: Positive reinforcement for correct answers with auto-progression\n- **Error Handling**: Gentle audio feedback without text interruptions\n- **Persistent Sessions**: Progress saved across page reloads using localStorage\n- **Automatic Flow**: Game automatically advances to next word after celebration\n\n### Accessibility\n- **Keyboard Navigation**: Full keyboard support for interactions\n- **Screen Reader Support**: Semantic HTML and ARIA labels\n- **Mobile Responsive**: Touch-friendly interface for tablets\n- **High Contrast**: Clear visual distinctions for readability","size_bytes":7373},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        'sans': ['Times New Roman', 'Georgia', 'serif', 'system-ui'],\n        'serif': ['Times New Roman', 'Georgia', 'serif'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2784},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertGameProgressSchema, insertUserAnswerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get available words (excluding correctly answered ones in last month)\n  app.get(\"/api/words\", async (req, res) => {\n    try {\n      // Cache words list for 2 minutes\n      res.set('Cache-Control', 'public, max-age=120');\n      const sessionId = req.query.sessionId as string || 'default-session';\n      const words = await storage.getAvailableWords(sessionId);\n      res.json(words);\n    } catch (error) {\n      console.error(\"Error fetching words:\", error);\n      res.status(500).json({ message: \"Failed to fetch words\" });\n    }\n  });\n\n  // Get a specific word by ID\n  app.get(\"/api/words/:id\", async (req, res) => {\n    try {\n      const word = await storage.getWord(req.params.id);\n      if (!word) {\n        return res.status(404).json({ message: \"Word not found\" });\n      }\n      res.json(word);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch word\" });\n    }\n  });\n\n  // Get random words for distractors\n  app.get(\"/api/words/:id/distractors\", async (req, res) => {\n    try {\n      // Cache distractors for 5 minutes\n      res.set('Cache-Control', 'public, max-age=300');\n      const count = parseInt(req.query.count as string) || 3;\n      const distractors = await storage.getRandomWords(req.params.id, count);\n      res.json(distractors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch distractors\" });\n    }\n  });\n\n  // Get letter options for missing letter game\n  app.get(\"/api/words/:id/letter-options\", async (req, res) => {\n    try {\n      const word = await storage.getWord(req.params.id);\n      if (!word) {\n        return res.status(404).json({ message: \"Word not found\" });\n      }\n      \n      const wordText = word.word;\n      const russianLetters = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';\n      \n      // Choose a random position to remove (not first or last position for easier gameplay)\n      const missingLetterIndex = Math.floor(Math.random() * (wordText.length - 2)) + 1;\n      const correctLetter = wordText[missingLetterIndex];\n      \n      // Generate 3 random incorrect letters that are not in the word\n      const wordLetters = new Set(wordText.split(''));\n      const availableLetters = russianLetters.split('').filter(letter => !wordLetters.has(letter));\n      const incorrectLetters = availableLetters\n        .sort(() => Math.random() - 0.5)\n        .slice(0, 3);\n      \n      // Combine correct and incorrect letters, then shuffle\n      const allOptions = [correctLetter, ...incorrectLetters]\n        .sort(() => Math.random() - 0.5);\n      \n      res.json({\n        letterOptions: allOptions,\n        missingLetterIndex,\n        correctLetter\n      });\n    } catch (error) {\n      console.error(\"Error getting letter options:\", error);\n      res.status(500).json({ message: \"Failed to get letter options\" });\n    }\n  });\n\n  // Get word with extra letter for extra letter game\n  app.get(\"/api/words/:id/extra-letter\", async (req, res) => {\n    try {\n      const word = await storage.getWord(req.params.id);\n      if (!word) {\n        return res.status(404).json({ message: \"Word not found\" });\n      }\n      \n      const wordText = word.word;\n      const russianLetters = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';\n      \n      // Choose a random position to insert extra letter (not at the very beginning or end)\n      const insertPosition = Math.floor(Math.random() * (wordText.length - 1)) + 1;\n      \n      // Generate a random letter that's not in the word\n      const wordLetters = new Set(wordText.split(''));\n      const availableLetters = russianLetters.split('').filter(letter => !wordLetters.has(letter));\n      const extraLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];\n      \n      // Insert the extra letter\n      const wordArray = wordText.split('');\n      wordArray.splice(insertPosition, 0, extraLetter);\n      const wordWithExtraLetter = wordArray.join('');\n      \n      res.json({\n        wordWithExtraLetter,\n        extraLetterIndex: insertPosition,\n        extraLetter\n      });\n    } catch (error) {\n      console.error(\"Error getting extra letter word:\", error);\n      res.status(500).json({ message: \"Failed to get extra letter word\" });\n    }\n  });\n\n  // Get letter options for spell word game\n  app.get(\"/api/words/:id/spell-letters\", async (req, res) => {\n    try {\n      const word = await storage.getWord(req.params.id);\n      if (!word) {\n        return res.status(404).json({ message: \"Word not found\" });\n      }\n      \n      const wordText = word.word;\n      const russianLetters = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';\n      \n      // Get all letters from the word (including duplicates)\n      const wordLetters = wordText.split('');\n      \n      // Calculate how many additional letters we need (total should be 10)\n      const targetTotal = 10;\n      const additionalLettersNeeded = targetTotal - wordLetters.length;\n      \n      // Generate random letters that are not in the word\n      const uniqueWordLetters = new Set(wordLetters);\n      const availableLetters = russianLetters.split('').filter(letter => !uniqueWordLetters.has(letter));\n      const additionalLetters = availableLetters\n        .sort(() => Math.random() - 0.5)\n        .slice(0, Math.max(0, additionalLettersNeeded));\n      \n      // Combine word letters with additional letters and shuffle\n      const allLetters = [...wordLetters, ...additionalLetters]\n        .sort(() => Math.random() - 0.5);\n      \n      res.json({\n        availableLetters: allLetters\n      });\n    } catch (error) {\n      console.error(\"Error getting spell letters:\", error);\n      res.status(500).json({ message: \"Failed to get spell letters\" });\n    }\n  });\n\n  // Create game progress\n  app.post(\"/api/game-progress\", async (req, res) => {\n    try {\n      const validatedData = insertGameProgressSchema.parse(req.body);\n      const progress = await storage.createGameProgress(validatedData);\n      res.status(201).json(progress);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid game progress data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create game progress\" });\n    }\n  });\n\n  // Get game progress\n  app.get(\"/api/game-progress/:id\", async (req, res) => {\n    try {\n      const progress = await storage.getGameProgress(req.params.id);\n      if (!progress) {\n        return res.status(404).json({ message: \"Game progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch game progress\" });\n    }\n  });\n\n  // Update game progress\n  app.patch(\"/api/game-progress/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const progress = await storage.updateGameProgress(req.params.id, updates);\n      if (!progress) {\n        return res.status(404).json({ message: \"Game progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update game progress\" });\n    }\n  });\n\n  // Get today's progress (correct answers count)\n  app.get(\"/api/progress/today\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string || 'default-session';\n      const count = await storage.getTodayCorrectAnswersCount(sessionId);\n      res.json({ correctAnswersToday: count });\n    } catch (error) {\n      console.error(\"Error getting today's progress:\", error);\n      res.status(500).json({ message: \"Failed to get today's progress\" });\n    }\n  });\n\n  // Record user answer\n  app.post(\"/api/answers\", async (req, res) => {\n    try {\n      const validatedData = insertUserAnswerSchema.parse(req.body);\n      const answer = await storage.recordAnswer(validatedData);\n      res.status(201).json(answer);\n    } catch (error) {\n      console.error(\"Error recording answer:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid answer data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to record answer\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8561},"server/storage.ts":{"content":"import { type Word, type InsertWord, type GameProgress, type InsertGameProgress, type UserAnswer, type InsertUserAnswer, words, userAnswers } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gt, sql, notInArray } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Word management\n  getAllWords(): Promise<Word[]>;\n  getWord(id: string): Promise<Word | undefined>;\n  createWord(word: InsertWord): Promise<Word>;\n  \n  // Game progress management\n  getGameProgress(id: string): Promise<GameProgress | undefined>;\n  createGameProgress(progress: InsertGameProgress): Promise<GameProgress>;\n  updateGameProgress(id: string, progress: Partial<GameProgress>): Promise<GameProgress | undefined>;\n  \n  // User answer tracking\n  recordAnswer(answer: InsertUserAnswer): Promise<UserAnswer>;\n  getCorrectAnswersInLastMonth(sessionId: string): Promise<string[]>;\n  getTodayCorrectAnswersCount(sessionId: string): Promise<number>;\n  \n  // Game logic helpers\n  getRandomWords(excludeId: string, count: number): Promise<Word[]>;\n  getAvailableWords(sessionId: string): Promise<Word[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private initialized = false;\n\n  private async ensureInitialized() {\n    if (this.initialized) return;\n    \n    await this.initializeWords();\n    this.initialized = true;\n  }\n\n  private async initializeWords() {\n    // Check if words already exist\n    const existingWords = await db.select().from(words).limit(1);\n    if (existingWords.length > 0) return;\n\n    const initialWords: InsertWord[] = [\n      { word: \"–°–õ–û–ù\", image: \"elephant\", audio: \"slon.mp3\" },\n      { word: \"–ö–û–¢\", image: \"cat\", audio: \"kot.mp3\" },\n      { word: \"–î–û–ú\", image: \"house\", audio: \"dom.mp3\" },\n      { word: \"–ú–Ø–ß\", image: \"ball\", audio: \"myach.mp3\" },\n      { word: \"–õ–ò–°–ê\", image: \"fox\", audio: \"lisa.mp3\" },\n      { word: \"–°–¢–û–õ\", image: \"table\", audio: \"stol.mp3\" },\n      { word: \"–†–´–ë–ê\", image: \"fish\", audio: \"ryba.mp3\" },\n      { word: \"–°–û–ë–ê–ö–ê\", image: \"dog\", audio: \"sobaka.mp3\" },\n      { word: \"–¶–í–ï–¢–û–ö\", image: \"flower\", audio: \"tsvetok.mp3\" },\n      { word: \"–ú–ê–®–ò–ù–ê\", image: \"car\", audio: \"mashina.mp3\" },\n      { word: \"–î–ï–†–ï–í–û\", image: \"tree\", audio: \"derevo.mp3\" },\n      { word: \"–°–û–õ–ù–¶–ï\", image: \"sun\", audio: \"solntse.mp3\" },\n      { word: \"–õ–£–ù–ê\", image: \"moon\", audio: \"luna.mp3\" },\n      { word: \"–ó–í–ï–ó–î–ê\", image: \"star\", audio: \"zvezda.mp3\" },\n      { word: \"–û–ë–õ–ê–ö–û\", image: \"cloud\", audio: \"oblako.mp3\" },\n      { word: \"–ü–¢–ò–¶–ê\", image: \"bird\", audio: \"ptitsa.mp3\" },\n      { word: \"–•–õ–ï–ë\", image: \"bread\", audio: \"hleb.mp3\" },\n      { word: \"–ú–û–õ–û–ö–û\", image: \"milk\", audio: \"moloko.mp3\" },\n      { word: \"–Ø–ë–õ–û–ö–û\", image: \"apple\", audio: \"yabloko.mp3\" },\n      { word: \"–ö–ù–ò–ì–ê\", image: \"book\", audio: \"kniga.mp3\" },\n      { word: \"–ö–ê–†–ê–ù–î–ê–®\", image: \"pencil\", audio: \"karandash.mp3\" },\n      { word: \"–°–¢–£–õ\", image: \"chair\", audio: \"stul.mp3\" },\n      { word: \"–û–ö–ù–û\", image: \"window\", audio: \"okno.mp3\" },\n      { word: \"–î–í–ï–†–¨\", image: \"door\", audio: \"dver.mp3\" },\n      { word: \"–õ–ê–ú–ü–ê\", image: \"lamp\", audio: \"lampa.mp3\" },\n      { word: \"–ß–ê–°–´\", image: \"clock\", audio: \"chasy.mp3\" },\n      { word: \"–¢–ï–õ–ï–§–û–ù\", image: \"phone\", audio: \"telefon.mp3\" },\n      { word: \"–¢–ï–õ–ï–í–ò–ó–û–†\", image: \"tv\", audio: \"televizor.mp3\" },\n      { word: \"–ö–û–ú–ü–¨–Æ–¢–ï–†\", image: \"computer\", audio: \"kompyuter.mp3\" },\n      { word: \"–°–ê–ú–û–õ–ï–¢\", image: \"airplane\", audio: \"samolet.mp3\" },\n      { word: \"–ü–û–ï–ó–î\", image: \"train\", audio: \"poezd.mp3\" },\n      { word: \"–ê–í–¢–û–ë–£–°\", image: \"bus\", audio: \"avtobus.mp3\" },\n      { word: \"–í–ï–õ–û–°–ò–ü–ï–î\", image: \"bicycle\", audio: \"velosiped.mp3\" },\n      { word: \"–ö–û–†–ê–ë–õ–¨\", image: \"ship\", audio: \"korabl.mp3\" },\n      { word: \"–ú–ï–î–í–ï–î–¨\", image: \"bear\", audio: \"medved.mp3\" },\n      { word: \"–ó–ê–Ø–¶\", image: \"rabbit\", audio: \"zayats.mp3\" },\n      { word: \"–í–û–õ–ö\", image: \"wolf\", audio: \"volk.mp3\" },\n      { word: \"–õ–Ø–ì–£–®–ö–ê\", image: \"frog\", audio: \"lyagushka.mp3\" },\n      { word: \"–ë–ê–ë–û–ß–ö–ê\", image: \"butterfly\", audio: \"babochka.mp3\" },\n      { word: \"–ü–ß–ï–õ–ê\", image: \"bee\", audio: \"pchela.mp3\" }\n    ];\n\n    // Insert all words at once\n    await db.insert(words).values(initialWords);\n  }\n\n  async getAllWords(): Promise<Word[]> {\n    await this.ensureInitialized();\n    return await db.select().from(words);\n  }\n\n  async getWord(id: string): Promise<Word | undefined> {\n    await this.ensureInitialized();\n    const [word] = await db.select().from(words).where(eq(words.id, id));\n    return word || undefined;\n  }\n\n  async createWord(insertWord: InsertWord): Promise<Word> {\n    const [word] = await db.insert(words).values(insertWord).returning();\n    return word;\n  }\n\n  async getGameProgress(id: string): Promise<GameProgress | undefined> {\n    // Implementation for game progress (not changed)\n    return undefined;\n  }\n\n  async createGameProgress(insertProgress: InsertGameProgress): Promise<GameProgress> {\n    // Implementation for game progress (not changed)\n    throw new Error(\"Not implemented\");\n  }\n\n  async updateGameProgress(id: string, updates: Partial<GameProgress>): Promise<GameProgress | undefined> {\n    // Implementation for game progress (not changed)\n    return undefined;\n  }\n\n  async recordAnswer(answer: InsertUserAnswer): Promise<UserAnswer> {\n    const [userAnswer] = await db.insert(userAnswers).values(answer).returning();\n    return userAnswer;\n  }\n\n  async getCorrectAnswersInLastMonth(sessionId: string): Promise<string[]> {\n    const oneMonthAgo = new Date();\n    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n\n    const correctAnswers = await db\n      .select({ wordId: userAnswers.wordId })\n      .from(userAnswers)\n      .where(\n        and(\n          eq(userAnswers.sessionId, sessionId),\n          eq(userAnswers.isCorrect, true),\n          gt(userAnswers.answeredAt, oneMonthAgo)\n        )\n      );\n\n    return correctAnswers.map(answer => answer.wordId);\n  }\n\n  async getTodayCorrectAnswersCount(sessionId: string): Promise<number> {\n    const todayStart = new Date();\n    todayStart.setHours(0, 0, 0, 0);\n\n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(userAnswers)\n      .where(\n        and(\n          eq(userAnswers.sessionId, sessionId),\n          eq(userAnswers.isCorrect, true),\n          gt(userAnswers.answeredAt, todayStart)\n        )\n      );\n\n    return Number(result[0]?.count || 0);\n  }\n\n  async getAvailableWords(sessionId: string): Promise<Word[]> {\n    await this.ensureInitialized();\n    \n    const correctWordIds = await this.getCorrectAnswersInLastMonth(sessionId);\n    \n    if (correctWordIds.length === 0) {\n      return await this.getAllWords();\n    }\n\n    // Get words that haven't been answered correctly in the last month\n    const availableWords = await db\n      .select()\n      .from(words)\n      .where(notInArray(words.id, correctWordIds));\n\n    return availableWords;\n  }\n\n  async getRandomWords(excludeId: string, count: number): Promise<Word[]> {\n    await this.ensureInitialized();\n    \n    const allWords = await db\n      .select()\n      .from(words)\n      .where(sql`${words.id} != ${excludeId}`)\n      .orderBy(sql`RANDOM()`)\n      .limit(count);\n\n    return allWords;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7432},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const words = pgTable(\"words\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: text(\"word\").notNull(),\n  image: text(\"image\").notNull(),\n  audio: text(\"audio\").notNull(),\n});\n\nexport const gameProgress = pgTable(\"game_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  currentWordIndex: integer(\"current_word_index\").notNull().default(0),\n  correctAnswers: integer(\"correct_answers\").notNull().default(0),\n  totalQuestions: integer(\"total_questions\").notNull().default(10),\n});\n\nexport const userAnswers = pgTable(\"user_answers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  wordId: varchar(\"word_id\").notNull(),\n  isCorrect: boolean(\"is_correct\").default(false),\n  answeredAt: timestamp(\"answered_at\", { withTimezone: true }).default(sql`now()`),\n  sessionId: varchar(\"session_id\").notNull(),\n});\n\nexport const insertWordSchema = createInsertSchema(words).omit({\n  id: true,\n});\n\nexport const insertGameProgressSchema = createInsertSchema(gameProgress).omit({\n  id: true,\n});\n\nexport const insertUserAnswerSchema = createInsertSchema(userAnswers).omit({\n  id: true,\n  answeredAt: true,\n});\n\nexport type InsertWord = z.infer<typeof insertWordSchema>;\nexport type Word = typeof words.$inferSelect;\nexport type InsertGameProgress = z.infer<typeof insertGameProgressSchema>;\nexport type GameProgress = typeof gameProgress.$inferSelect;\nexport type InsertUserAnswer = z.infer<typeof insertUserAnswerSchema>;\nexport type UserAnswer = typeof userAnswers.$inferSelect;\n\n// Game types\nexport type GameType = 'picture-match' | 'missing-letter' | 'extra-letter' | 'spell-word' | 'mix';\n\n// Letter audio mapping for Russian alphabet\nexport const RUSSIAN_LETTERS = {\n  '–ê': 'a', '–ë': 'b', '–í': 'v', '–ì': 'g', '–î': 'd', '–ï': 'e', '–Å': 'yo',\n  '–ñ': 'zh', '–ó': 'z', '–ò': 'i', '–ô': 'y', '–ö': 'k', '–õ': 'l', '–ú': 'm',\n  '–ù': 'n', '–û': 'o', '–ü': 'p', '–†': 'r', '–°': 's', '–¢': 't', '–£': 'u',\n  '–§': 'f', '–•': 'h', '–¶': 'ts', '–ß': 'ch', '–®': 'sh', '–©': 'sch',\n  '–™': 'hard', '–´': 'y', '–¨': 'soft', '–≠': 'e', '–Æ': 'yu', '–Ø': 'ya'\n} as const;\n","size_bytes":2346},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Game from \"@/pages/game\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Game} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(247, 83%, 62%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(142, 71%, 45%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(43, 89%, 49%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Child-friendly colors */\n  --child-bg: hsl(214, 32%, 97%);\n  --child-text: hsl(217, 19%, 12%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(247, 83%, 62%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, body, #root {\n    height: 100vh;\n    overflow: hidden;\n    overscroll-behavior: none;\n    -webkit-overflow-scrolling: touch;\n    position: fixed;\n    width: 100%;\n    /* iOS Safari specific fixes */\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gradient-to-br from-blue-50 to-purple-50 text-foreground;\n    font-family: 'Times New Roman', 'Georgia', 'serif', system-ui;\n    touch-action: manipulation;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n}\n\n@layer components {\n  .letter-button {\n    transition: transform 0.2s ease;\n  }\n  \n  .letter-button:hover {\n    transform: scale(1.1);\n  }\n\n  /* Touch drag & drop support */\n  .draggable {\n    touch-action: none;\n    -webkit-user-drag: element;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n  \n  .drop-zone {\n    touch-action: none;\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  /* iOS Safari specific fixes */\n  .ios-touch-fix {\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n  }\n\n  /* Prevent text selection during drag */\n  .no-select {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n  \n  .picture-option {\n    transition: all 0.3s ease;\n  }\n  \n  .picture-option:hover {\n    transform: scale(1.05);\n    box-shadow: 0 10px 25px rgba(79, 70, 229, 0.3);\n  }\n  \n  .celebration-overlay {\n    background: linear-gradient(45deg, hsl(247, 83%, 62%), hsl(142, 71%, 45%), hsl(43, 89%, 49%));\n    background-size: 400% 400%;\n    animation: gradient 2s ease infinite;\n  }\n  \n  @keyframes gradient {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n  \n  @keyframes wiggle {\n    0%, 100% { transform: rotate(-3deg); }\n    50% { transform: rotate(3deg); }\n  }\n  \n  @keyframes celebrate {\n    0% { transform: scale(1) rotate(0deg); }\n    50% { transform: scale(1.2) rotate(5deg); }\n    100% { transform: scale(1) rotate(0deg); }\n  }\n  \n  @keyframes firework {\n    0% { transform: scale(0) rotate(0deg); opacity: 1; }\n    50% { transform: scale(1.5) rotate(180deg); opacity: 0.8; }\n    100% { transform: scale(2) rotate(360deg); opacity: 0; }\n  }\n  \n  @keyframes twinkle {\n    0%, 100% { opacity: 0.3; transform: scale(0.8); }\n    50% { opacity: 1; transform: scale(1.2); }\n  }\n  \n  .animate-wiggle {\n    animation: wiggle 0.5s ease-in-out;\n  }\n  \n  .animate-celebrate {\n    animation: celebrate 1s ease-in-out;\n  }\n  \n  .animate-firework {\n    animation: firework 1.5s ease-out;\n  }\n  \n  .star {\n    position: absolute;\n    color: hsl(43, 89%, 49%);\n    animation: twinkle 2s infinite;\n  }\n}\n","size_bytes":4825},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/public/audio/README.md":{"content":"# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤\n\n## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫\n\n```\nclient/public/audio/\n‚îú‚îÄ‚îÄ letters/          # –ó–≤—É–∫–∏ –¥–ª—è –±—É–∫–≤\n‚îÇ   ‚îú‚îÄ‚îÄ –∞.mp3\n‚îÇ   ‚îú‚îÄ‚îÄ –±.mp3\n‚îÇ   ‚îú‚îÄ‚îÄ –≤.mp3\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ README.md\n```\n\n## –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–∏ –¥–ª—è –±—É–∫–≤\n\n1. **–°–æ–∑–¥–∞–π—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã** –¥–ª—è –∫–∞–∂–¥–æ–π —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤—ã\n   - –§–æ—Ä–º–∞—Ç: MP3, WAV –∏–ª–∏ OGG\n   - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–∞.mp3`, `–±.mp3`, `–≤.mp3`)\n   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1-2 —Å–µ–∫—É–Ω–¥—ã\n   - –ö–∞—á–µ—Å—Ç–≤–æ: 44.1 –∫–ì—Ü, —Å—Ç–µ—Ä–µ–æ –∏–ª–∏ –º–æ–Ω–æ\n\n2. **–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã** –≤ –ø–∞–ø–∫—É `client/public/audio/letters/`\n\n3. **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã:\n   - –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –≤–∞—à –∑–≤—É–∫\n   - –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Web Speech API (—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏)\n\n## –°–ø–∏—Å–æ–∫ –±—É–∫–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏\n\n–í–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–∏—Ö –±—É–∫–≤:\n- –∞, –±, –≤, –≥, –¥, –µ, —ë, –∂, –∑, –∏, –π, –∫, –ª, –º, –Ω, –æ, –ø, —Ä, —Å, —Ç, —É, —Ñ, —Ö, —Ü, —á, —à, —â, —ä, —ã, —å, —ç, —é, —è\n\n## –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤\n\n```\n–∞.mp3  (–±—É–∫–≤–∞ \"–∞\")\n–±.mp3  (–±—É–∫–≤–∞ \"–±\") \n–≤.mp3  (–±—É–∫–≤–∞ \"–≤\")\n–≥.mp3  (–±—É–∫–≤–∞ \"–≥\")\n...–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ\n```\n\n## –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–ø–∏—Å–∏\n\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å—Ç–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–≤—É–∫–æ–≤\n- –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–≤—É–∫ –±—É–∫–≤—ã, –∞ –Ω–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è \"–±\" –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–≤—É–∫ [–±], –∞ –Ω–µ \"–±—ç\")\n- –ì–æ–≤–æ—Ä–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ —á–µ—Ç–∫–æ\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –¥–ª—è –¥–µ—Ç–µ–π","size_bytes":1988},"client/src/components/CelebrationOverlay.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useEffect, useRef } from \"react\";\n\ninterface CelebrationOverlayProps {\n  isVisible: boolean;\n  onNext: () => void;\n}\n\nexport function CelebrationOverlay({ isVisible, onNext }: CelebrationOverlayProps) {\n  const { playApplause } = useAudio();\n  const hasPlayedSound = useRef(false);\n\n  useEffect(() => {\n    if (isVisible) {\n      // Only play sound once per celebration\n      if (!hasPlayedSound.current) {\n        playApplause();\n        hasPlayedSound.current = true;\n      }\n      \n      // Automatically advance to next word after 1.5 seconds (faster)\n      const timer = setTimeout(() => {\n        onNext();\n      }, 1500);\n      \n      return () => clearTimeout(timer);\n    } else {\n      // Reset sound flag when celebration is hidden\n      hasPlayedSound.current = false;\n    }\n  }, [isVisible, playApplause, onNext]);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          className=\"fixed inset-0 celebration-overlay z-50 flex items-center justify-center\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"text-center\">\n            {/* Fireworks Effects */}\n            <div className=\"relative\">\n              <motion.div \n                className=\"star text-6xl absolute\"\n                style={{ top: -100, left: -50 }}\n                animate={{ \n                  scale: [0.8, 1.2, 0.8],\n                  opacity: [0.3, 1, 0.3],\n                  rotate: [0, 180, 360]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                ‚≠ê\n              </motion.div>\n              <motion.div \n                className=\"star text-4xl absolute\"\n                style={{ top: -80, right: -30 }}\n                animate={{ \n                  scale: [0.8, 1.2, 0.8],\n                  opacity: [0.3, 1, 0.3]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              >\n                ‚ú®\n              </motion.div>\n              <motion.div \n                className=\"star text-5xl absolute\"\n                style={{ bottom: -90, left: -40 }}\n                animate={{ \n                  scale: [0.8, 1.2, 0.8],\n                  opacity: [0.3, 1, 0.3]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n              >\n                üåü\n              </motion.div>\n              <motion.div \n                className=\"star text-3xl absolute\"\n                style={{ bottom: -70, right: -60 }}\n                animate={{ \n                  scale: [0.8, 1.2, 0.8],\n                  opacity: [0.3, 1, 0.3]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1.5 }}\n              >\n                üí´\n              </motion.div>\n            </div>\n            \n            {/* Success Message */}\n            <motion.div \n              className=\"bg-white rounded-3xl p-8 shadow-2xl mx-4\"\n              initial={{ scale: 0.5, rotate: -5 }}\n              animate={{ scale: 1, rotate: 0 }}\n              transition={{ \n                type: \"spring\",\n                stiffness: 260,\n                damping: 20,\n                delay: 0.2\n              }}\n            >\n              <motion.div \n                className=\"text-8xl mb-4\"\n                animate={{ \n                  scale: [1, 1.2, 1],\n                  rotate: [0, 10, -10, 0]\n                }}\n                transition={{ \n                  duration: 1,\n                  repeat: Infinity,\n                  repeatType: \"reverse\"\n                }}\n              >\n                üéâ\n              </motion.div>\n              <h2 className=\"text-4xl font-bold text-secondary mb-4\">–û—Ç–ª–∏—á–Ω–æ!</h2>\n              <p className=\"text-2xl text-child-text mb-6\">–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!</p>\n              \n              {/* Applause Animation */}\n              <div className=\"flex justify-center space-x-4 mb-6\">\n                {[0, 0.2, 0.4].map((delay, index) => (\n                  <motion.span\n                    key={index}\n                    className=\"text-4xl\"\n                    animate={{ \n                      scale: [1, 1.3, 1],\n                      rotate: [0, 15, -15, 0]\n                    }}\n                    transition={{\n                      duration: 0.6,\n                      repeat: Infinity,\n                      delay: delay\n                    }}\n                  >\n                    üëè\n                  </motion.span>\n                ))}\n              </div>\n              \n              <motion.div\n                className=\"text-lg text-gray-600 mt-4\"\n                animate={{ opacity: [0.5, 1, 0.5] }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              >\n                –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...\n              </motion.div>\n            </motion.div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":5209},"client/src/components/ExtraLetterGame.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { type Word } from \"@shared/schema\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface ExtraLetterGameProps {\n  word: Word;\n  wordWithExtraLetter: string;\n  extraLetterIndex: number;\n  onLetterRemove: (letterIndex: number, isCorrect: boolean) => void;\n  disabled?: boolean;\n}\n\nconst PICTURE_EMOJIS: Record<string, string> = {\n  'elephant': 'üêò',\n  'cat': 'üê±',\n  'house': 'üè†',\n  'ball': '‚öΩ',\n  'fox': 'ü¶ä',\n  'table': 'üìã',\n  'fish': 'üêü',\n  'dog': 'üêï',\n  'flower': 'üå∏',\n  'car': 'üöó',\n  'tree': 'üå≥',\n  'sun': '‚òÄÔ∏è',\n  'moon': 'üåô',\n  'star': '‚≠ê',\n  'cloud': '‚òÅÔ∏è',\n  'bird': 'üê¶',\n  'bread': 'üçû',\n  'milk': 'ü•õ',\n  'apple': 'üçé',\n  'book': 'üìñ',\n  'pencil': '‚úèÔ∏è',\n  'chair': 'ü™ë',\n  'window': 'ü™ü',\n  'door': 'üö™',\n  'lamp': 'üí°',\n  'clock': 'üïê',\n  'phone': 'üì±',\n  'tv': 'üì∫',\n  'computer': 'üíª',\n  'airplane': '‚úàÔ∏è',\n  'train': 'üöÇ',\n  'bus': 'üöå',\n  'bicycle': 'üö≤',\n  'ship': 'üö¢',\n  'bear': 'üêª',\n  'rabbit': 'üê∞',\n  'wolf': 'üê∫',\n  'frog': 'üê∏',\n  'butterfly': 'ü¶ã',\n  'bee': 'üêù'\n};\n\nexport function ExtraLetterGame({ word, wordWithExtraLetter, extraLetterIndex, onLetterRemove, disabled }: ExtraLetterGameProps) {\n  const { playLetterSound } = useAudio();\n  const [draggedLetter, setDraggedLetter] = useState<{letter: string, index: number} | null>(null);\n  const [touchDragData, setTouchDragData] = useState<{letter: string, index: number} | null>(null);\n  const [dragPreview, setDragPreview] = useState<{x: number, y: number, letter: string, offsetX: number, offsetY: number, width: number, height: number} | null>(null);\n  \n  const wordArray = wordWithExtraLetter.split('');\n  const emoji = PICTURE_EMOJIS[word.image] || '‚ùì';\n\n  const handleLetterClick = (letterIndex: number) => {\n    if (disabled) return;\n    \n    const letter = wordArray[letterIndex];\n    playLetterSound(letter);\n  };\n\n  const handleDragStart = (letterIndex: number) => {\n    if (disabled) return;\n    const letter = wordArray[letterIndex];\n    setDraggedLetter({ letter, index: letterIndex });\n  };\n\n  const handleDragEnd = () => {\n    setDraggedLetter(null);\n  };\n\n  const handleDropOnTrash = () => {\n    if (!draggedLetter || disabled) return;\n    \n    const isCorrect = draggedLetter.index === extraLetterIndex;\n    onLetterRemove(draggedLetter.index, isCorrect);\n    setDraggedLetter(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  // Touch handlers for mobile (iOS compatible)\n  const handleTouchStart = (e: React.TouchEvent, letterIndex: number) => {\n    if (disabled) return;\n    const letter = wordArray[letterIndex];\n    const touch = e.touches[0];\n    const element = e.currentTarget as HTMLElement;\n    const rect = element.getBoundingClientRect();\n    \n    const offsetX = touch.clientX - rect.left;\n    const offsetY = touch.clientY - rect.top;\n    \n    setTouchDragData({ letter, index: letterIndex });\n    setDragPreview({ \n      x: rect.left, \n      y: rect.top, \n      letter,\n      offsetX,\n      offsetY,\n      width: rect.width,\n      height: rect.height\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchDragData || !dragPreview) return;\n    const touch = e.touches[0];\n    setDragPreview({ \n      ...dragPreview,\n      x: touch.clientX - dragPreview.offsetX, \n      y: touch.clientY - dragPreview.offsetY\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent, isTrashZone = false) => {\n    if (!touchDragData) return;\n    \n    const touch = e.changedTouches?.[0] || e.touches?.[0];\n    \n    if (isTrashZone && touch) {\n      const isCorrect = touchDragData.index === extraLetterIndex;\n      onLetterRemove(touchDragData.index, isCorrect);\n    } else if (touch && !isTrashZone) {\n      // Try to find trash zone under touch point for iOS\n      const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);\n      const trashZone = elementUnderTouch?.closest('[data-trash-zone]');\n      \n      if (trashZone) {\n        const isCorrect = touchDragData.index === extraLetterIndex;\n        onLetterRemove(touchDragData.index, isCorrect);\n      }\n    }\n    \n    setTouchDragData(null);\n    setDragPreview(null);\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleSpeakerClick = () => {\n    if (disabled) return;\n    \n    // Use Web Speech API to pronounce the word\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(word.word);\n      utterance.lang = 'ru-RU';\n      utterance.rate = 0.8;\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-8\">\n      {/* Picture and Speaker */}\n      <div className=\"text-center\">\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          className=\"text-8xl mb-4\"\n        >\n          {emoji}\n        </motion.div>\n        <motion.div \n          className=\"text-4xl mb-2 cursor-pointer hover:scale-110 transition-transform\"\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleSpeakerClick}\n        >\n          üîä\n        </motion.div>\n      </div>\n\n\n\n      {/* Word with extra letter - draggable */}\n      <div className=\"flex gap-2 mb-8\">\n        {wordArray.map((letter, index) => (\n          <motion.div\n            key={index}\n            initial={{ y: -20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: index * 0.1 }}\n            whileHover={{ scale: disabled ? 1 : 1.05 }}\n            whileTap={{ scale: disabled ? 1 : 0.95 }}\n            onClick={() => handleLetterClick(index)}\n            draggable={!disabled}\n            onDragStart={() => handleDragStart(index)}\n            onDragEnd={handleDragEnd}\n            onTouchStart={(e) => handleTouchStart(e, index)}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={(e) => handleTouchEnd(e)}\n            className={`\n              w-16 h-16 flex items-center justify-center text-3xl font-bold\n              rounded-lg border-2 transition-all duration-200 cursor-pointer select-none draggable no-select\n              ${disabled \n                ? 'border-gray-300 bg-gray-100 text-gray-400 cursor-not-allowed' \n                : 'border-gray-300 bg-white text-gray-800 hover:border-red-400 hover:bg-red-50 hover:text-red-600'\n              }\n            `}\n          >\n            {letter}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Trash can */}\n      <motion.div\n        className={`\n          w-32 h-32 flex items-center justify-center text-6xl rounded-2xl border-4 border-dashed\n          transition-all duration-200 cursor-pointer drop-zone no-select\n          ${draggedLetter \n            ? 'border-red-400 bg-red-50 scale-110' \n            : 'border-gray-400 bg-gray-50'\n          }\n        `}\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: draggedLetter ? 1.1 : 1 }}\n        transition={{ delay: 1 }}\n        onDrop={handleDropOnTrash}\n        onDragOver={handleDragOver}\n        onTouchEnd={(e) => handleTouchEnd(e, true)}\n        data-trash-zone=\"true\"\n      >\n        üóëÔ∏è\n      </motion.div>\n\n      {/* Touch Drag Preview */}\n      {dragPreview && (\n        <motion.div\n          className=\"fixed pointer-events-none z-50 bg-red-500 text-white rounded-xl flex items-center justify-center font-bold shadow-2xl border-2 border-red-300 opacity-90\"\n          style={{\n            left: dragPreview.x,\n            top: dragPreview.y,\n            width: dragPreview.width,\n            height: dragPreview.height,\n            fontSize: `${Math.min(dragPreview.width, dragPreview.height) * 0.4}px`,\n          }}\n          initial={{ scale: 1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0 }}\n        >\n          {dragPreview.letter}\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":8112},"client/src/components/GameHeader.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface GameHeaderProps {\n  currentWordIndex: number;\n  totalWords: number;\n  correctAnswersToday: number;\n  onSettingsClick: () => void;\n}\n\nexport function GameHeader({ currentWordIndex, totalWords, correctAnswersToday, onSettingsClick }: GameHeaderProps) {\n  // Calculate progress based on today's correct answers\n  const targetAnswers = Math.max(20, correctAnswersToday);\n  const progressPercentage = Math.min((correctAnswersToday / targetAnswers) * 100, 100);\n\n  return (\n    <header className=\"bg-white shadow-lg p-4 mb-6\">\n      <div className=\"max-w-4xl mx-auto flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-primary flex items-center\">\n          <span className=\"text-3xl mr-2\">üìö</span>\n          Kidread\n        </h1>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"bg-gray-200 rounded-full h-4 w-32 overflow-hidden\">\n            <motion.div \n              className=\"bg-secondary rounded-full h-4\"\n              initial={{ width: 0 }}\n              animate={{ width: `${progressPercentage}%` }}\n              transition={{ duration: 0.5, ease: \"easeOut\" }}\n            />\n          </div>\n          <span className=\"text-lg font-semibold text-child-text\">\n            {correctAnswersToday >= 20 ? `${correctAnswersToday}/${correctAnswersToday}` : `${correctAnswersToday}/20`}\n          </span>\n        </div>\n        \n        <button \n          onClick={onSettingsClick}\n          className=\"bg-accent hover:bg-yellow-500 text-white font-bold py-2 px-4 rounded-full transition-colors duration-200\"\n        >\n          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n        </button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1729},"client/src/components/GameMenu.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { type GameType } from \"@shared/schema\";\nimport { HelpButton } from \"./HelpButton\";\n\nconst GAME_ICONS: Record<GameType, string> = {\n  'picture-match': 'üñºÔ∏è',\n  'missing-letter': 'üîç', \n  'extra-letter': 'üóëÔ∏è',\n  'spell-word': '‚úèÔ∏è',\n  'mix': 'üé≤'\n};\n\ninterface GameMenuProps {\n  currentGameType: GameType;\n  onGameTypeChange: (gameType: GameType) => void;\n  currentMixType?: string;\n}\n\nexport function GameMenu({ currentGameType, onGameTypeChange, currentMixType }: GameMenuProps) {\n  const gameTypes: GameType[] = ['picture-match', 'missing-letter', 'extra-letter', 'spell-word', 'mix'];\n  \n  return (\n    <div className=\"flex gap-2 mb-4 justify-between items-center\">\n      <div className=\"flex gap-2\">\n        {gameTypes.map((gameType) => (\n          <motion.button\n            key={gameType}\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => onGameTypeChange(gameType)}\n            className={`w-16 h-16 rounded-xl text-3xl transition-colors flex items-center justify-center ${\n              currentGameType === gameType\n                ? 'bg-blue-500 text-white shadow-md'\n                : 'bg-gray-100 hover:bg-gray-200'\n            }`}\n          >\n            {GAME_ICONS[gameType]}\n          </motion.button>\n        ))}\n      </div>\n      \n      <HelpButton \n        gameType={currentGameType} \n        currentMixType={currentMixType}\n      />\n    </div>\n  );\n}","size_bytes":1490},"client/src/components/HelpButton.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { type GameType } from \"@shared/schema\";\n\ninterface HelpButtonProps {\n  gameType: GameType;\n  currentMixType?: string;\n}\n\nconst GAME_INSTRUCTIONS: Record<string, string> = {\n  'picture-match': '–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–ª–æ–≤–æ –∏ –Ω–∞–π–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É. –ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤—É.',\n  'missing-letter': '–í —Å–ª–æ–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –±—É–∫–≤–∞. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',\n  'extra-letter': '–í —Å–ª–æ–≤–µ –µ—Å—Ç—å –ª–∏—à–Ω—è—è –±—É–∫–≤–∞. –ù–∞–π–¥–∏ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –ª–∏—à–Ω—é—é –±—É–∫–≤—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ—ë.',\n  'spell-word': '–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π –±—É–∫–≤—ã –∏–ª–∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ.',\n  'mix': '–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–π. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.'\n};\n\nexport function HelpButton({ gameType, currentMixType }: HelpButtonProps) {\n  const [showHelp, setShowHelp] = useState(false);\n\n  const getInstructions = () => {\n    if (gameType === 'mix' && currentMixType) {\n      return GAME_INSTRUCTIONS[currentMixType] || GAME_INSTRUCTIONS['mix'];\n    }\n    return GAME_INSTRUCTIONS[gameType] || '–°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.';\n  };\n\n  return (\n    <>\n      {/* Help Button */}\n      <motion.button\n        className=\"w-12 h-12 bg-blue-500 text-white rounded-full text-xl font-bold hover:bg-blue-600 transition-colors shadow-lg\"\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.9 }}\n        onClick={() => setShowHelp(!showHelp)}\n      >\n        ?\n      </motion.button>\n\n      {/* Help Overlay */}\n      <AnimatePresence>\n        {showHelp && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\"\n            onClick={() => setShowHelp(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.5, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.5, opacity: 0 }}\n              className=\"bg-white rounded-xl p-8 max-w-md mx-4 text-center shadow-2xl\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"text-4xl mb-4\">üí°</div>\n              <h3 className=\"text-xl font-bold mb-4 text-gray-800\">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h3>\n              <p className=\"text-gray-700 leading-relaxed mb-6\">\n                {getInstructions()}\n              </p>\n              <motion.button\n                className=\"bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => setShowHelp(false)}\n              >\n                –ü–æ–Ω—è—Ç–Ω–æ!\n              </motion.button>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":3357},"client/src/components/MissingLetterGame.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { type Word } from \"@shared/schema\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface MissingLetterGameProps {\n  word: Word;\n  letterOptions: string[];\n  missingLetterIndex: number;\n  onLetterSelect: (letter: string, isCorrect: boolean) => void;\n  disabled?: boolean;\n}\n\nconst PICTURE_EMOJIS: Record<string, string> = {\n  'elephant': 'üêò',\n  'cat': 'üê±',\n  'house': 'üè†',\n  'ball': '‚öΩ',\n  'fox': 'ü¶ä',\n  'table': 'üìã',\n  'fish': 'üêü',\n  'dog': 'üêï',\n  'flower': 'üå∏',\n  'car': 'üöó',\n  'tree': 'üå≥',\n  'sun': '‚òÄÔ∏è',\n  'moon': 'üåô',\n  'star': '‚≠ê',\n  'cloud': '‚òÅÔ∏è',\n  'bird': 'üê¶',\n  'bread': 'üçû',\n  'milk': 'ü•õ',\n  'apple': 'üçé',\n  'book': 'üìñ',\n  'pencil': '‚úèÔ∏è',\n  'chair': 'ü™ë',\n  'window': 'ü™ü',\n  'door': 'üö™',\n  'lamp': 'üí°',\n  'clock': 'üïê',\n  'phone': 'üì±',\n  'tv': 'üì∫',\n  'computer': 'üíª',\n  'airplane': '‚úàÔ∏è',\n  'train': 'üöÇ',\n  'bus': 'üöå',\n  'bicycle': 'üö≤',\n  'ship': 'üö¢',\n  'bear': 'üêª',\n  'rabbit': 'üê∞',\n  'wolf': 'üê∫',\n  'frog': 'üê∏',\n  'butterfly': 'ü¶ã',\n  'bee': 'üêù'\n};\n\nexport function MissingLetterGame({ word, letterOptions, missingLetterIndex, onLetterSelect, disabled }: MissingLetterGameProps) {\n  const { playLetterSound } = useAudio();\n  const [draggedLetter, setDraggedLetter] = useState<string | null>(null);\n  const [touchDragLetter, setTouchDragLetter] = useState<string | null>(null);\n  const [dragPreview, setDragPreview] = useState<{x: number, y: number, letter: string, offsetX: number, offsetY: number, width: number, height: number} | null>(null);\n  \n  const wordArray = word.word.split('');\n  const correctLetter = wordArray[missingLetterIndex];\n  const emoji = PICTURE_EMOJIS[word.image] || '‚ùì';\n\n  const handleLetterClick = (letter: string) => {\n    if (disabled) return;\n    playLetterSound(letter);\n  };\n\n  const handleWordLetterClick = (letter: string, letterIndex: number) => {\n    if (disabled || letterIndex === missingLetterIndex) return;\n    playLetterSound(letter);\n  };\n\n  const handleDragStart = (letter: string) => {\n    if (disabled) return;\n    setDraggedLetter(letter);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedLetter(null);\n  };\n\n  const handleDrop = () => {\n    if (!draggedLetter || disabled) return;\n    \n    const isCorrect = draggedLetter === correctLetter;\n    onLetterSelect(draggedLetter, isCorrect);\n    setDraggedLetter(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  // Touch handlers for mobile (iOS compatible)\n  const handleTouchStart = (e: React.TouchEvent, letter: string) => {\n    if (disabled) return;\n    const touch = e.touches[0];\n    const element = e.currentTarget as HTMLElement;\n    const rect = element.getBoundingClientRect();\n    \n    const offsetX = touch.clientX - rect.left;\n    const offsetY = touch.clientY - rect.top;\n    \n    setTouchDragLetter(letter);\n    setDragPreview({ \n      x: rect.left, \n      y: rect.top, \n      letter,\n      offsetX,\n      offsetY,\n      width: rect.width,\n      height: rect.height\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchDragLetter || !dragPreview) return;\n    const touch = e.touches[0];\n    setDragPreview({ \n      ...dragPreview,\n      x: touch.clientX - dragPreview.offsetX, \n      y: touch.clientY - dragPreview.offsetY\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent, isDropZone = false) => {\n    if (!touchDragLetter) return;\n    \n    const touch = e.changedTouches?.[0] || e.touches?.[0];\n    \n    if (isDropZone && touch) {\n      const correctLetter = wordArray[missingLetterIndex];\n      const isCorrect = touchDragLetter === correctLetter;\n      onLetterSelect(touchDragLetter, isCorrect);\n    } else if (touch && !isDropZone) {\n      // Try to find drop zone under touch point for iOS\n      const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);\n      const dropZone = elementUnderTouch?.closest('[data-missing-letter]');\n      \n      if (dropZone) {\n        const correctLetter = wordArray[missingLetterIndex];\n        const isCorrect = touchDragLetter === correctLetter;\n        onLetterSelect(touchDragLetter, isCorrect);\n      }\n    }\n    \n    setTouchDragLetter(null);\n    setDragPreview(null);\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleSpeakerClick = () => {\n    if (disabled) return;\n    \n    // Use Web Speech API to pronounce the word\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(word.word);\n      utterance.lang = 'ru-RU';\n      utterance.rate = 0.8;\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-8\">\n      {/* Picture and Speaker */}\n      <div className=\"text-center\">\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          className=\"text-8xl mb-4\"\n        >\n          {emoji}\n        </motion.div>\n        <motion.div \n          className=\"text-4xl mb-2 cursor-pointer hover:scale-110 transition-transform\"\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleSpeakerClick}\n        >\n          üîä\n        </motion.div>\n      </div>\n\n      {/* Word with missing letter */}\n      <div className=\"flex gap-2 mb-8\">\n        {wordArray.map((letter, index) => (\n          <motion.div\n            key={index}\n            initial={{ y: -20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: index * 0.1 }}\n            className={`\n              w-16 h-16 flex items-center justify-center text-3xl font-bold\n              rounded-lg border-2 transition-colors no-select\n              ${index === missingLetterIndex \n                ? 'border-dashed border-blue-400 bg-blue-50 text-transparent cursor-pointer drop-zone' \n                : 'border-gray-300 bg-white text-gray-800 cursor-pointer hover:bg-blue-50'\n              }\n            `}\n            onClick={index !== missingLetterIndex ? () => handleWordLetterClick(letter, index) : undefined}\n            onDrop={index === missingLetterIndex ? handleDrop : undefined}\n            onDragOver={index === missingLetterIndex ? handleDragOver : undefined}\n            onTouchEnd={index === missingLetterIndex ? (e) => handleTouchEnd(e, true) : undefined}\n            data-missing-letter={index === missingLetterIndex ? \"true\" : undefined}\n          >\n            {index === missingLetterIndex ? '‚ùì' : letter}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Letter options */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        {letterOptions.map((letter, index) => (\n          <motion.div\n            key={letter}\n            initial={{ scale: 0, rotate: -180 }}\n            animate={{ scale: 1, rotate: 0 }}\n            transition={{ delay: 0.3 + index * 0.1 }}\n            whileHover={{ scale: disabled ? 1 : 1.05 }}\n            whileTap={{ scale: disabled ? 1 : 0.95 }}\n            onClick={() => handleLetterClick(letter)}\n            draggable={!disabled}\n            onDragStart={() => handleDragStart(letter)}\n            onDragEnd={handleDragEnd}\n            onTouchStart={(e) => handleTouchStart(e, letter)}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={(e) => handleTouchEnd(e)}\n            className={`\n              w-20 h-20 text-4xl font-bold rounded-xl transition-all duration-200 cursor-pointer select-none draggable no-select\n              ${disabled \n                ? 'bg-gray-100 text-gray-400 cursor-not-allowed' \n                : 'bg-gradient-to-br from-purple-400 to-pink-400 text-white shadow-lg hover:shadow-xl hover:from-purple-500 hover:to-pink-500'\n              }\n              flex items-center justify-center\n            `}\n          >\n            {letter}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Touch Drag Preview */}\n      {dragPreview && (\n        <motion.div\n          className=\"fixed pointer-events-none z-50 bg-purple-500 text-white rounded-xl flex items-center justify-center font-bold shadow-2xl border-2 border-purple-300 opacity-90\"\n          style={{\n            left: dragPreview.x,\n            top: dragPreview.y,\n            width: dragPreview.width,\n            height: dragPreview.height,\n            fontSize: `${Math.min(dragPreview.width, dragPreview.height) * 0.5}px`,\n          }}\n          initial={{ scale: 1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0 }}\n        >\n          {dragPreview.letter}\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":8770},"client/src/components/MixGame.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Word, type GameType } from \"@shared/schema\";\nimport { WordDisplay } from \"./WordDisplay\";\nimport { PictureGrid } from \"./PictureGrid\";\nimport { MissingLetterGame } from \"./MissingLetterGame\";\nimport { ExtraLetterGame } from \"./ExtraLetterGame\";\nimport { SpellWordGame } from \"./SpellWordGame\";\nimport { motion } from \"framer-motion\";\n\ninterface MixGameProps {\n  word: Word;\n  onAnswer: (isCorrect: boolean) => void;\n  disabled: boolean;\n  onMixTypeChange?: (mixType: string) => void;\n}\n\nconst GAME_TYPE_NAMES: Record<Exclude<GameType, 'mix'>, string> = {\n  'picture-match': '–ù–∞–π–¥–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É',\n  'missing-letter': '–ù–∞–π–¥–∏ –±—É–∫–≤—É',\n  'extra-letter': '–£–±–µ—Ä–∏ –ª–∏—à–Ω–µ–µ',\n  'spell-word': '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ'\n};\n\nconst GAME_TYPE_ICONS: Record<Exclude<GameType, 'mix'>, string> = {\n  'picture-match': 'üñºÔ∏è',\n  'missing-letter': 'üîç',\n  'extra-letter': 'üóëÔ∏è',\n  'spell-word': '‚úèÔ∏è'\n};\n\nexport function MixGame({ word, onAnswer, disabled, onMixTypeChange }: MixGameProps) {\n  // Randomly select game type for this word\n  const [currentMixType, setCurrentMixType] = useState<Exclude<GameType, 'mix'>>(() => {\n    const gameTypes: Array<Exclude<GameType, 'mix'>> = ['picture-match', 'missing-letter', 'extra-letter', 'spell-word'];\n    return gameTypes[Math.floor(Math.random() * gameTypes.length)];\n  });\n\n  // Reset game type when word changes\n  useEffect(() => {\n    const gameTypes: Array<Exclude<GameType, 'mix'>> = ['picture-match', 'missing-letter', 'extra-letter', 'spell-word'];\n    const newType = gameTypes[Math.floor(Math.random() * gameTypes.length)];\n    setCurrentMixType(newType);\n    onMixTypeChange?.(newType);\n  }, [word.id, onMixTypeChange]);\n\n  // Notify parent of initial mix type\n  useEffect(() => {\n    onMixTypeChange?.(currentMixType);\n  }, [currentMixType, onMixTypeChange]);\n\n  // Fetch data based on current mix type\n  const { data: distractors = [], isLoading: distractorsLoading } = useQuery<Word[]>({\n    queryKey: [\"/api/words\", word.id, \"distractors\"],\n    enabled: currentMixType === 'picture-match',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: letterData, isLoading: letterOptionsLoading } = useQuery<{\n    letterOptions: string[];\n    missingLetterIndex: number;\n    correctLetter: string;\n  }>({\n    queryKey: [\"/api/words\", word.id, \"letter-options\"],\n    enabled: currentMixType === 'missing-letter',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: extraLetterData, isLoading: extraLetterLoading } = useQuery<{\n    wordWithExtraLetter: string;\n    extraLetterIndex: number;\n    extraLetter: string;\n  }>({\n    queryKey: [\"/api/words\", word.id, \"extra-letter\"],\n    enabled: currentMixType === 'extra-letter',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: spellLettersData, isLoading: spellLettersLoading } = useQuery<{\n    availableLetters: string[];\n  }>({\n    queryKey: [\"/api/words\", word.id, \"spell-letters\"],\n    enabled: currentMixType === 'spell-word',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const handlePictureSelect = (selectedWord: Word, isCorrect: boolean) => {\n    onAnswer(isCorrect);\n  };\n\n  const handleLetterSelect = (letter: string, isCorrect: boolean) => {\n    onAnswer(isCorrect);\n  };\n\n  const handleLetterRemove = (letterIndex: number, isCorrect: boolean) => {\n    onAnswer(isCorrect);\n  };\n\n  const handleWordComplete = (isCorrect: boolean) => {\n    onAnswer(isCorrect);\n  };\n\n\n\n  return (\n    <div>\n      {/* Show current game type indicator */}\n      <div className=\"text-center mb-4\">\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          className=\"inline-flex items-center gap-2 bg-blue-100 rounded-full px-4 py-2\"\n        >\n          <span className=\"text-2xl\">{GAME_TYPE_ICONS[currentMixType]}</span>\n          <span className=\"text-sm font-medium text-blue-800\">{GAME_TYPE_NAMES[currentMixType]}</span>\n        </motion.div>\n      </div>\n\n      {currentMixType === 'picture-match' && (\n        <>\n          <WordDisplay word={word.word} />\n          \n          {distractorsLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-2xl\">‚è≥</div>\n              <p className=\"text-sm text-gray-500\">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...</p>\n            </div>\n          ) : (\n            <PictureGrid\n              correctWord={word}\n              distractors={distractors}\n              onPictureSelect={handlePictureSelect}\n              disabled={disabled}\n            />\n          )}\n\n          <div className=\"text-center mt-8\">\n            <motion.div\n              className=\"text-6xl\"\n              animate={{ \n                rotate: [-10, 10, -10],\n                scale: [1, 1.1, 1]\n              }}\n              transition={{ \n                duration: 2, \n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              üëÜ\n            </motion.div>\n          </div>\n        </>\n      )}\n\n      {currentMixType === 'missing-letter' && (\n        letterOptionsLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-2xl\">‚è≥</div>\n            <p className=\"text-sm text-gray-500\">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±—É–∫–≤—ã...</p>\n          </div>\n        ) : letterData ? (\n          <MissingLetterGame\n            word={word}\n            letterOptions={letterData.letterOptions}\n            missingLetterIndex={letterData.missingLetterIndex}\n            onLetterSelect={handleLetterSelect}\n            disabled={disabled}\n          />\n        ) : null\n      )}\n\n      {currentMixType === 'extra-letter' && (\n        extraLetterLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-2xl\">‚è≥</div>\n            <p className=\"text-sm text-gray-500\">–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...</p>\n          </div>\n        ) : extraLetterData ? (\n          <ExtraLetterGame\n            word={word}\n            wordWithExtraLetter={extraLetterData.wordWithExtraLetter}\n            extraLetterIndex={extraLetterData.extraLetterIndex}\n            onLetterRemove={handleLetterRemove}\n            disabled={disabled}\n          />\n        ) : null\n      )}\n\n      {currentMixType === 'spell-word' && (\n        spellLettersLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-2xl\">‚è≥</div>\n            <p className=\"text-sm text-gray-500\">–ì–æ—Ç–æ–≤–∏–º –±—É–∫–≤—ã...</p>\n          </div>\n        ) : spellLettersData ? (\n          <SpellWordGame\n            word={word}\n            availableLetters={spellLettersData.availableLetters}\n            onWordComplete={handleWordComplete}\n            disabled={disabled}\n          />\n        ) : null\n      )}\n    </div>\n  );\n}","size_bytes":6884},"client/src/components/PictureGrid.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { type Word } from \"@shared/schema\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface PictureGridProps {\n  correctWord: Word;\n  distractors: Word[];\n  onPictureSelect: (word: Word, isCorrect: boolean) => void;\n  disabled?: boolean;\n}\n\nconst PICTURE_EMOJIS: Record<string, string> = {\n  'elephant': 'üêò',\n  'cat': 'üê±',\n  'house': 'üè†',\n  'ball': '‚öΩ',\n  'fox': 'ü¶ä',\n  'table': 'üìã',\n  'fish': 'üêü',\n  'dog': 'üêï',\n  'flower': 'üå∏',\n  'car': 'üöó',\n  'tree': 'üå≥',\n  'sun': '‚òÄÔ∏è',\n  'moon': 'üåô',\n  'star': '‚≠ê',\n  'cloud': '‚òÅÔ∏è',\n  'bird': 'üê¶',\n  'bread': 'üçû',\n  'milk': 'ü•õ',\n  'apple': 'üçé',\n  'book': 'üìñ',\n  'pencil': '‚úèÔ∏è',\n  'chair': 'ü™ë',\n  'window': 'ü™ü',\n  'door': 'üö™',\n  'lamp': 'üí°',\n  'clock': 'üïê',\n  'phone': 'üì±',\n  'tv': 'üì∫',\n  'computer': 'üíª',\n  'airplane': '‚úàÔ∏è',\n  'train': 'üöÇ',\n  'bus': 'üöå',\n  'bicycle': 'üö≤',\n  'ship': 'üö¢',\n  'bear': 'üêª',\n  'rabbit': 'üê∞',\n  'wolf': 'üê∫',\n  'frog': 'üê∏',\n  'butterfly': 'ü¶ã',\n  'bee': 'üêù'\n};\n\nexport function PictureGrid({ correctWord, distractors, onPictureSelect, disabled }: PictureGridProps) {\n  const { playTryAgain } = useAudio();\n  const [shuffledOptions, setShuffledOptions] = useState<Word[]>([]);\n  \n  // Shuffle options only when correctWord or distractors change\n  useEffect(() => {\n    if (correctWord && distractors.length > 0) {\n      const allOptions = [correctWord, ...distractors];\n      const shuffled = [...allOptions].sort(() => Math.random() - 0.5);\n      setShuffledOptions(shuffled);\n    }\n  }, [correctWord.id, distractors.map(d => d.id).join(',')]);\n  \n  // Use shuffled options\n  const allOptions = shuffledOptions.length > 0 ? shuffledOptions : [correctWord, ...distractors];\n\n  const handlePictureClick = (word: Word) => {\n    if (disabled) return;\n    \n    const isCorrect = word.id === correctWord.id;\n    if (!isCorrect) {\n      playTryAgain();\n    }\n    onPictureSelect(word, isCorrect);\n  };\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto\">\n      {allOptions.map((word, index) => {\n        const isCorrect = word.id === correctWord.id;\n        \n        return (\n          <motion.div\n            key={word.id}\n            onClick={() => handlePictureClick(word)}\n            className={`picture-option bg-white rounded-3xl p-6 shadow-xl cursor-pointer border-4 border-transparent hover:border-secondary ${\n              disabled ? 'opacity-50 cursor-not-allowed' : ''\n            }`}\n            whileHover={disabled ? {} : { scale: 1.05 }}\n            whileTap={disabled ? {} : { scale: 0.95 }}\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <div className=\"w-full h-32 flex items-center justify-center rounded-2xl bg-gradient-to-br from-blue-50 to-purple-50\">\n              <span className=\"text-6xl\">\n                {PICTURE_EMOJIS[word.image] || '‚ùì'}\n              </span>\n            </div>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3205},"client/src/components/SpellWordGame.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { type Word } from \"@shared/schema\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface SpellWordGameProps {\n  word: Word;\n  availableLetters: string[];\n  onWordComplete: (isCorrect: boolean) => void;\n  disabled?: boolean;\n}\n\nconst PICTURE_EMOJIS: Record<string, string> = {\n  'elephant': 'üêò',\n  'cat': 'üê±',\n  'house': 'üè†',\n  'ball': '‚öΩ',\n  'fox': 'ü¶ä',\n  'table': 'üìã',\n  'fish': 'üêü',\n  'dog': 'üêï',\n  'flower': 'üå∏',\n  'car': 'üöó',\n  'tree': 'üå≥',\n  'sun': '‚òÄÔ∏è',\n  'moon': 'üåô',\n  'star': '‚≠ê',\n  'cloud': '‚òÅÔ∏è',\n  'bird': 'üê¶',\n  'bread': 'üçû',\n  'milk': 'ü•õ',\n  'apple': 'üçé',\n  'book': 'üìñ',\n  'pencil': '‚úèÔ∏è',\n  'chair': 'ü™ë',\n  'window': 'ü™ü',\n  'door': 'üö™',\n  'lamp': 'üí°',\n  'clock': 'üïê',\n  'phone': 'üì±',\n  'tv': 'üì∫',\n  'computer': 'üíª',\n  'airplane': '‚úàÔ∏è',\n  'train': 'üöÇ',\n  'bus': 'üöå',\n  'bicycle': 'üö≤',\n  'ship': 'üö¢',\n  'bear': 'üêª',\n  'rabbit': 'üê∞',\n  'wolf': 'üê∫',\n  'mouse': 'üê≠',\n  'frog': 'üê∏',\n  'butterfly': 'ü¶ã',\n};\n\nexport function SpellWordGame({ word, availableLetters, onWordComplete, disabled }: SpellWordGameProps) {\n  const [selectedLetters, setSelectedLetters] = useState<string[]>([]);\n  const [usedLetterIndices, setUsedLetterIndices] = useState<Set<number>>(new Set());\n  const [showResult, setShowResult] = useState<'correct' | 'incorrect' | null>(null);\n  const [draggedLetter, setDraggedLetter] = useState<{letter: string, index: number} | null>(null);\n  const [incorrectLetterIndex, setIncorrectLetterIndex] = useState<number | null>(null);\n  const [touchDragData, setTouchDragData] = useState<{letter: string, sourceIndex: number} | null>(null);\n  const [isIOS, setIsIOS] = useState(false);\n  const [dragPreview, setDragPreview] = useState<{x: number, y: number, letter: string, offsetX: number, offsetY: number, width: number, height: number} | null>(null);\n  const { playLetterSound, playTryAgain } = useAudio();\n\n  // Detect iOS for special handling\n  useEffect(() => {\n    const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n    setIsIOS(isIOSDevice);\n  }, []);\n\n  const handleLetterClick = (letter: string) => {\n    if (disabled || showResult) return;\n    playLetterSound(letter);\n  };\n\n  const handleDragStart = (letter: string, index: number) => {\n    if (disabled || showResult || usedLetterIndices.has(index)) return;\n    setDraggedLetter({ letter, index });\n  };\n\n  const handleDragEnd = () => {\n    setDraggedLetter(null);\n  };\n\n  const handleDrop = (dropIndex: number) => {\n    if (!draggedLetter || disabled || showResult) return;\n    \n    const { letter, index } = draggedLetter;\n    \n    // Check if this letter is correct for this position\n    const correctLetter = word.word[dropIndex];\n    const isCorrect = letter === correctLetter;\n    \n    if (!isCorrect) {\n      // Show red highlight and play error sound\n      setIncorrectLetterIndex(dropIndex);\n      playTryAgain();\n      \n      // Remove the highlight after animation\n      setTimeout(() => {\n        setIncorrectLetterIndex(null);\n        setDraggedLetter(null);\n      }, 800);\n      \n      return;\n    }\n    \n    // Letter is correct, add it\n    const newSelectedLetters = [...selectedLetters];\n    newSelectedLetters[dropIndex] = letter;\n    \n    const newUsedIndices = new Set(Array.from(usedLetterIndices).concat([index]));\n    \n    setSelectedLetters(newSelectedLetters);\n    setUsedLetterIndices(newUsedIndices);\n    setDraggedLetter(null);\n\n    // Check if word is complete\n    const filledPositions = newSelectedLetters.filter(l => l).length;\n    if (filledPositions === word.word.length) {\n      const spelledWord = newSelectedLetters.join('');\n      \n      // Show result immediately\n      setShowResult('correct');\n      \n      // Wait a moment to show result, then proceed\n      setTimeout(() => {\n        setShowResult(null);\n        onWordComplete(true);\n      }, 1500);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  // Touch handlers for mobile drag&drop (iOS compatible)\n  const handleTouchStart = (e: React.TouchEvent, letter: string, index: number) => {\n    if (disabled || showResult || usedLetterIndices.has(index)) return;\n    \n    const touch = e.touches[0];\n    const element = e.currentTarget as HTMLElement;\n    const rect = element.getBoundingClientRect();\n    \n    // –í—ã—á–∏—Å–ª—è–µ–º offset –æ—Ç –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è\n    const offsetX = touch.clientX - rect.left;\n    const offsetY = touch.clientY - rect.top;\n    \n    setTouchDragData({ letter, sourceIndex: index });\n    setDragPreview({ \n      x: rect.left, \n      y: rect.top, \n      letter,\n      offsetX,\n      offsetY,\n      width: rect.width,\n      height: rect.height\n    });\n    \n    // iOS Safari requires stopPropagation\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchDragData || !dragPreview) return;\n    \n    const touch = e.touches[0];\n    \n    setDragPreview({ \n      ...dragPreview,\n      x: touch.clientX - dragPreview.offsetX, \n      y: touch.clientY - dragPreview.offsetY\n    });\n    \n    // iOS Safari requires stopPropagation\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent, dropIndex?: number) => {\n    if (!touchDragData) return;\n    \n    // iOS Safari compatible touch end handling\n    const touch = e.changedTouches?.[0] || e.touches?.[0];\n    \n    if (dropIndex !== undefined && touch) {\n      // This is a drop zone, handle the drop\n      const { letter, sourceIndex } = touchDragData;\n      \n      // Check if this letter is correct for this position\n      const correctLetter = word.word[dropIndex];\n      const isCorrect = letter === correctLetter;\n      \n      if (!isCorrect) {\n        // Show red highlight and play error sound\n        setIncorrectLetterIndex(dropIndex);\n        playTryAgain();\n        \n        // Remove the highlight after animation\n        setTimeout(() => {\n          setIncorrectLetterIndex(null);\n        }, 800);\n      } else {\n        // Letter is correct, add it\n        const newSelectedLetters = [...selectedLetters];\n        newSelectedLetters[dropIndex] = letter;\n        \n        const newUsedIndices = new Set(Array.from(usedLetterIndices).concat([sourceIndex]));\n        \n        setSelectedLetters(newSelectedLetters);\n        setUsedLetterIndices(newUsedIndices);\n\n        // Check if word is complete\n        const filledPositions = newSelectedLetters.filter(l => l).length;\n        if (filledPositions === word.word.length) {\n          const spelledWord = newSelectedLetters.join('');\n          setShowResult(spelledWord === word.word ? 'correct' : 'incorrect');\n          \n          setTimeout(() => {\n            onWordComplete(spelledWord === word.word);\n          }, 1500);\n        }\n      }\n    } else if (touch && !dropIndex) {\n      // Try to find drop zone under touch point for iOS\n      const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);\n      const dropZone = elementUnderTouch?.closest('[data-drop-index]');\n      \n      if (dropZone) {\n        const dropIdx = parseInt(dropZone.getAttribute('data-drop-index') || '');\n        if (!isNaN(dropIdx)) {\n          // Recursively call with found drop index\n          return handleTouchEnd(e, dropIdx);\n        }\n      }\n    }\n    \n    setTouchDragData(null);\n    setDragPreview(null);\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleLetterRemove = (removeIndex: number) => {\n    if (disabled || showResult) return;\n\n    const newSelectedLetters = selectedLetters.filter((_, i) => i !== removeIndex);\n    \n    // Find the letter we're removing and its original index\n    const removedLetter = selectedLetters[removeIndex];\n    const originalIndex = availableLetters.findIndex((letter, idx) => \n      letter === removedLetter && usedLetterIndices.has(idx)\n    );\n    \n    const newUsedIndices = new Set(Array.from(usedLetterIndices));\n    newUsedIndices.delete(originalIndex);\n    \n    setSelectedLetters(newSelectedLetters);\n    setUsedLetterIndices(newUsedIndices);\n  };\n\n  const handleBackspace = () => {\n    if (disabled || showResult || selectedLetters.length === 0) return;\n    \n    // Remove the last letter\n    const lastIndex = selectedLetters.length - 1;\n    const lastLetter = selectedLetters[lastIndex];\n    \n    // Find the original index of this letter in availableLetters\n    const originalIndex = availableLetters.findIndex((letter, idx) => \n      letter === lastLetter && usedLetterIndices.has(idx)\n    );\n    \n    const newSelectedLetters = selectedLetters.slice(0, -1);\n    const newUsedIndices = new Set(Array.from(usedLetterIndices));\n    newUsedIndices.delete(originalIndex);\n    \n    setSelectedLetters(newSelectedLetters);\n    setUsedLetterIndices(newUsedIndices);\n  };\n\n  const getPictureEmoji = (word: Word) => {\n    return PICTURE_EMOJIS[word.image] || '‚ùì';\n  };\n\n  const handleSpeakerClick = () => {\n    if (disabled || showResult) return;\n    \n    // Use Web Speech API to pronounce the word\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(word.word);\n      utterance.lang = 'ru-RU';\n      utterance.rate = 0.8;\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Picture Display */}\n      <div className=\"text-center\">\n        <div className=\"text-8xl mb-4\">\n          {getPictureEmoji(word)}\n        </div>\n        <motion.div \n          className=\"text-4xl mb-2 cursor-pointer hover:scale-110 transition-transform\"\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleSpeakerClick}\n        >\n          üîä\n        </motion.div>\n      </div>\n\n      {/* Selected Letters Display */}\n      <div className=\"flex justify-center gap-3 min-h-[100px] items-center\">\n        {Array.from({ length: word.word.length }).map((_, index) => (\n          <motion.div\n            key={index}\n            className={`w-20 h-20 border-4 rounded-xl flex items-center justify-center text-4xl font-black text-black shadow-lg transition-all duration-300 drop-zone no-select ${\n              incorrectLetterIndex === index\n                ? 'border-red-500 bg-red-100 animate-pulse'\n                : selectedLetters[index] \n                  ? 'border-blue-500 bg-gray-100 cursor-pointer hover:bg-blue-100' \n                  : 'border-dashed border-gray-400 bg-gray-50'\n            }`}\n            whileHover={{ scale: selectedLetters[index] ? 1.05 : 1.02 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => selectedLetters[index] && handleLetterRemove(index)}\n            onDrop={() => handleDrop(index)}\n            onDragOver={handleDragOver}\n            onTouchEnd={(e) => handleTouchEnd(e, index)}\n            data-drop-index={index}\n            animate={incorrectLetterIndex === index ? { \n              x: [-10, 10, -10, 10, 0],\n              scale: [1, 1.1, 1]\n            } : {}}\n            transition={{ duration: 0.6 }}\n          >\n            {selectedLetters[index] || ''}\n          </motion.div>\n        ))}\n        \n        {/* Backspace Button */}\n        {selectedLetters.length > 0 && !showResult && (\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            onClick={handleBackspace}\n            className=\"w-20 h-20 bg-orange-500 text-white rounded-xl text-3xl font-bold hover:bg-orange-600 transition-colors shadow-lg border-2 border-orange-500 hover:border-orange-600 ml-2\"\n            disabled={disabled}\n          >\n            ‚å´\n          </motion.button>\n        )}\n      </div>\n\n\n\n      {/* Available Letters */}\n      <div className=\"grid grid-cols-5 gap-4 max-w-lg mx-auto\">\n        {availableLetters.map((letter, index) => (\n          <motion.div\n            key={index}\n            className={`w-20 h-20 rounded-xl text-3xl font-black transition-all shadow-lg cursor-pointer select-none draggable no-select ${\n              usedLetterIndices.has(index)\n                ? 'bg-gray-300 text-gray-600 border-2 border-gray-400 cursor-not-allowed'\n                : 'bg-blue-500 text-white hover:bg-blue-600 border-2 border-blue-500 hover:border-blue-600'\n            }`}\n            whileHover={!usedLetterIndices.has(index) && !disabled ? { scale: 1.1 } : {}}\n            whileTap={!usedLetterIndices.has(index) && !disabled ? { scale: 0.9 } : {}}\n            onClick={() => !usedLetterIndices.has(index) && handleLetterClick(letter)}\n            draggable={!usedLetterIndices.has(index) && !disabled}\n            onDragStart={() => handleDragStart(letter, index)}\n            onDragEnd={handleDragEnd}\n            onTouchStart={(e) => handleTouchStart(e, letter, index)}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={(e) => handleTouchEnd(e)}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              opacity: usedLetterIndices.has(index) ? 0.5 : 1,\n            }}\n          >\n            {letter}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Result Display */}\n      {showResult && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"text-center mb-4\"\n        >\n          {showResult === 'correct' ? (\n            <div className=\"text-6xl text-green-500\">\n              <div className=\"text-8xl mb-2\">üéâ</div>\n\n            </div>\n          ) : (\n            <div className=\"text-6xl text-red-500\">\n              <div className=\"text-8xl mb-2\">‚ùå</div>\n              <p className=\"text-3xl font-bold text-gray-800 mt-2\">{word.word}</p>\n            </div>\n          )}\n        </motion.div>\n      )}\n\n      {/* Progress indicator */}\n      {!showResult && (\n        <div className=\"text-center text-child-text\">\n          <div className=\"flex justify-center gap-2\">\n            {Array.from({ length: word.word.length }).map((_, i) => (\n              <div key={i} className={`w-4 h-4 rounded-full ${i < selectedLetters.length ? 'bg-blue-500' : 'bg-gray-300'}`} />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Touch Drag Preview */}\n      {dragPreview && (\n        <motion.div\n          className=\"fixed pointer-events-none z-50 bg-blue-500 text-white rounded-xl flex items-center justify-center font-bold shadow-2xl border-2 border-blue-300 opacity-90\"\n          style={{\n            left: dragPreview.x,\n            top: dragPreview.y,\n            width: dragPreview.width,\n            height: dragPreview.height,\n            fontSize: `${Math.min(dragPreview.width, dragPreview.height) * 0.4}px`,\n          }}\n          initial={{ scale: 1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0 }}\n        >\n          {dragPreview.letter}\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":15148},"client/src/components/WordDisplay.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface WordDisplayProps {\n  word: string;\n}\n\nexport function WordDisplay({ word }: WordDisplayProps) {\n  const { playLetterSound } = useAudio();\n\n  const handleLetterClick = (letter: string) => {\n    playLetterSound(letter);\n  };\n\n  return (\n    <div className=\"text-center mb-8\">      \n      <div className=\"flex justify-center space-x-4 mb-8\">\n        {word.split('').map((letter, index) => (\n          <motion.button\n            key={`${letter}-${index}`}\n            onClick={() => handleLetterClick(letter)}\n            className=\"letter-button bg-white border-4 border-primary text-primary font-bold text-6xl w-20 h-20 rounded-2xl shadow-lg hover:bg-primary hover:text-white transition-all duration-300\"\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.95 }}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            {letter}\n          </motion.button>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1116},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAudio.ts":{"content":"import { useCallback, useRef } from 'react';\n\nexport function useAudio() {\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const playCustomAudio = useCallback((audioFile: string) => {\n    try {\n      if (audioRef.current) {\n        audioRef.current.pause();\n      }\n      \n      const audio = new Audio(audioFile);\n      audio.volume = 0.7;\n      audioRef.current = audio;\n      audio.play().catch(error => {\n        console.warn('Failed to play custom audio:', error);\n      });\n    } catch (error) {\n      console.warn('Custom audio not available:', error);\n    }\n  }, []);\n\n  const playLetterSound = useCallback((letter: string) => {\n    // Use Russian audio folder for Cyrillic letters\n    const customAudioPath = `/audio/letters/—Ä–æ—Å/${letter.toUpperCase()}.mp3`;\n    \n    const audio = new Audio(customAudioPath);\n    \n    audio.addEventListener('error', () => {\n      console.log(`Russian audio not found for letter: ${letter}, using Web Speech API`);\n      // Fallback to Web Speech API\n      try {\n        const utterance = new SpeechSynthesisUtterance(letter);\n        utterance.lang = 'ru-RU';\n        utterance.rate = 0.7;\n        utterance.pitch = 1.2;\n        speechSynthesis.speak(utterance);\n      } catch (error) {\n        console.warn('Speech synthesis not available:', error);\n      }\n    });\n    \n    audio.addEventListener('canplaythrough', () => {\n      console.log(`Playing Russian audio for letter: ${letter}`);\n    });\n\n    audio.play().catch(() => {\n      console.log(`Failed to play audio for letter: ${letter}, using Web Speech API`);\n      // Fallback to Web Speech API\n      try {\n        const utterance = new SpeechSynthesisUtterance(letter);\n        utterance.lang = 'ru-RU';\n        utterance.rate = 0.7;\n        utterance.pitch = 1.2;\n        speechSynthesis.speak(utterance);\n      } catch (error) {\n        console.warn('Speech synthesis not available:', error);\n      }\n    });\n  }, []);\n\n  const playApplause = useCallback(() => {\n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Create a pleasant success sound - ascending musical notes\n      const duration = 0.8;\n      const sampleRate = audioContext.sampleRate;\n      const buffer = audioContext.createBuffer(1, duration * sampleRate, sampleRate);\n      const data = buffer.getChannelData(0);\n      \n      // Generate a pleasant \"ding\" sound with three ascending notes\n      for (let i = 0; i < data.length; i++) {\n        const time = i / sampleRate;\n        let sample = 0;\n        \n        // Three pleasant tones: C5, E5, G5 (major chord)\n        if (time < 0.3) {\n          sample += Math.sin(2 * Math.PI * 523.25 * time) * Math.exp(-time * 3) * 0.3; // C5\n        }\n        if (time >= 0.2 && time < 0.5) {\n          sample += Math.sin(2 * Math.PI * 659.25 * (time - 0.2)) * Math.exp(-(time - 0.2) * 3) * 0.3; // E5\n        }\n        if (time >= 0.4 && time < 0.8) {\n          sample += Math.sin(2 * Math.PI * 783.99 * (time - 0.4)) * Math.exp(-(time - 0.4) * 3) * 0.3; // G5\n        }\n        \n        data[i] = sample;\n      }\n      \n      const source = audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(audioContext.destination);\n      source.start();\n    } catch (error) {\n      console.warn('Web Audio API not available:', error);\n    }\n  }, []);\n\n  const playTryAgain = useCallback(() => {\n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Create a gentle \"try again\" sound - descending notes\n      const duration = 0.6;\n      const sampleRate = audioContext.sampleRate;\n      const buffer = audioContext.createBuffer(1, duration * sampleRate, sampleRate);\n      const data = buffer.getChannelData(0);\n      \n      // Generate a gentle descending sound\n      for (let i = 0; i < data.length; i++) {\n        const time = i / sampleRate;\n        let sample = 0;\n        \n        // Two descending tones: G4 to E4 (gentle disappointment)\n        if (time < 0.3) {\n          sample += Math.sin(2 * Math.PI * 392 * time) * Math.exp(-time * 4) * 0.2; // G4\n        }\n        if (time >= 0.2 && time < 0.6) {\n          sample += Math.sin(2 * Math.PI * 329.63 * (time - 0.2)) * Math.exp(-(time - 0.2) * 4) * 0.2; // E4\n        }\n        \n        data[i] = sample;\n      }\n      \n      const source = audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(audioContext.destination);\n      source.start();\n    } catch (error) {\n      console.warn('Web Audio API not available:', error);\n    }\n  }, []);\n\n  return {\n    playLetterSound,\n    playApplause,\n    playTryAgain\n  };\n}\n","size_bytes":4697},"client/src/hooks/useSimpleTouchFallback.ts":{"content":"import { useState } from 'react';\n\n// Simple click-based fallback for iOS devices that have touch issues\nexport function useSimpleTouchFallback() {\n  const [selectedLetter, setSelectedLetter] = useState<{letter: string, index?: number} | null>(null);\n\n  const selectLetter = (letter: string, index?: number) => {\n    setSelectedLetter({ letter, index });\n  };\n\n  const clearSelection = () => {\n    setSelectedLetter(null);\n  };\n\n  const useSelection = (onDrop: (letter: string, index?: number) => void) => {\n    if (selectedLetter) {\n      onDrop(selectedLetter.letter, selectedLetter.index);\n      clearSelection();\n    }\n  };\n\n  return {\n    selectedLetter,\n    selectLetter,\n    clearSelection,\n    useSelection,\n  };\n}","size_bytes":722},"client/src/hooks/useTouchDragDrop.ts":{"content":"import { useState, useCallback } from 'react';\n\ninterface TouchDragDropState {\n  isDragging: boolean;\n  draggedData: any;\n  startPosition: { x: number; y: number } | null;\n}\n\nexport function useTouchDragDrop() {\n  const [dragState, setDragState] = useState<TouchDragDropState>({\n    isDragging: false,\n    draggedData: null,\n    startPosition: null,\n  });\n\n  const handleTouchStart = useCallback((e: TouchEvent, data: any) => {\n    const touch = e.touches[0];\n    setDragState({\n      isDragging: true,\n      draggedData: data,\n      startPosition: { x: touch.clientX, y: touch.clientY },\n    });\n    e.preventDefault();\n  }, []);\n\n  const handleTouchMove = useCallback((e: TouchEvent) => {\n    if (!dragState.isDragging) return;\n    e.preventDefault();\n  }, [dragState.isDragging]);\n\n  const handleTouchEnd = useCallback((e: TouchEvent, onDrop?: (data: any) => void) => {\n    if (!dragState.isDragging) return;\n    \n    const touch = e.changedTouches[0];\n    const elementBelow = document.elementFromPoint(touch.clientX, touch.clientY);\n    \n    // Find drop zone element\n    let dropZone = elementBelow;\n    while (dropZone && !dropZone.classList.contains('drop-zone')) {\n      dropZone = dropZone.parentElement;\n    }\n    \n    if (dropZone && onDrop) {\n      onDrop(dragState.draggedData);\n    }\n    \n    setDragState({\n      isDragging: false,\n      draggedData: null,\n      startPosition: null,\n    });\n    \n    e.preventDefault();\n  }, [dragState]);\n\n  const getTouchHandlers = useCallback((data: any, onDrop?: (data: any) => void) => ({\n    onTouchStart: (e: TouchEvent) => handleTouchStart(e, data),\n    onTouchMove: handleTouchMove,\n    onTouchEnd: (e: TouchEvent) => handleTouchEnd(e, onDrop),\n  }), [handleTouchStart, handleTouchMove, handleTouchEnd]);\n\n  return {\n    dragState,\n    getTouchHandlers,\n  };\n}","size_bytes":1819},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/game.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { type Word, type GameType } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GameHeader } from \"@/components/GameHeader\";\nimport { GameMenu } from \"@/components/GameMenu\";\nimport { WordDisplay } from \"@/components/WordDisplay\";\nimport { PictureGrid } from \"@/components/PictureGrid\";\nimport { MissingLetterGame } from \"@/components/MissingLetterGame\";\nimport { ExtraLetterGame } from \"@/components/ExtraLetterGame\";\nimport { SpellWordGame } from \"@/components/SpellWordGame\";\nimport { MixGame } from \"@/components/MixGame\";\nimport { CelebrationOverlay } from \"@/components/CelebrationOverlay\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function Game() {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [selectedPicture, setSelectedPicture] = useState<Word | null>(null);\n  const [gameType, setGameType] = useState<GameType>('picture-match');\n  const [currentMixType, setCurrentMixType] = useState<string>('');\n  const [sessionId] = useState(() => {\n    // Check if we have a session ID in localStorage\n    const stored = localStorage.getItem('russian-game-session');\n    if (stored) {\n      return stored;\n    }\n    // Create new session ID and store it\n    const newSessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    localStorage.setItem('russian-game-session', newSessionId);\n    return newSessionId;\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch available words (excluding correctly answered ones)\n  const { data: words = [], isLoading: wordsLoading } = useQuery<Word[]>({\n    queryKey: [\"/api/words\", sessionId],\n    queryFn: () => fetch(`/api/words?sessionId=${sessionId}`).then(res => res.json()),\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  // Fetch today's progress\n  const { data: todayProgress, isLoading: progressLoading } = useQuery<{ correctAnswersToday: number }>({\n    queryKey: [\"/api/progress/today\", sessionId],\n    queryFn: () => fetch(`/api/progress/today?sessionId=${sessionId}`).then(res => res.json()),\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  // Get current word\n  const currentWord = words[currentWordIndex];\n\n  // Fetch distractors for current word (picture-match mode)\n  const { data: distractors = [], isLoading: distractorsLoading } = useQuery<Word[]>({\n    queryKey: [\"/api/words\", currentWord?.id, \"distractors\"],\n    enabled: !!currentWord?.id && gameType === 'picture-match',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch letter options for current word (missing-letter mode)\n  const { data: letterData, isLoading: letterOptionsLoading } = useQuery<{\n    letterOptions: string[];\n    missingLetterIndex: number;\n    correctLetter: string;\n  }>({\n    queryKey: [\"/api/words\", currentWord?.id, \"letter-options\"],\n    enabled: !!currentWord?.id && gameType === 'missing-letter',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch extra letter data for current word (extra-letter mode)\n  const { data: extraLetterData, isLoading: extraLetterLoading } = useQuery<{\n    wordWithExtraLetter: string;\n    extraLetterIndex: number;\n    extraLetter: string;\n  }>({\n    queryKey: [\"/api/words\", currentWord?.id, \"extra-letter\"],\n    enabled: !!currentWord?.id && gameType === 'extra-letter',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch spell letters for current word (spell-word mode)\n  const { data: spellLettersData, isLoading: spellLettersLoading } = useQuery<{\n    availableLetters: string[];\n  }>({\n    queryKey: [\"/api/words\", currentWord?.id, \"spell-letters\"],\n    enabled: !!currentWord?.id && gameType === 'spell-word',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Handle mix game answers\n  const handleMixAnswer = (isCorrect: boolean) => {\n    // Prevent multiple selections while processing\n    if (selectedPicture || showCelebration) return;\n    \n    setSelectedPicture({ id: 'mix-complete', word: 'mix-complete', image: '', audio: '' } as Word);\n    \n    // Record the answer in the database\n    if (currentWord) {\n      recordAnswerMutation.mutate({\n        wordId: currentWord.id,\n        isCorrect,\n        sessionId,\n      });\n    }\n    \n    if (isCorrect) {\n      setCorrectAnswers(prev => prev + 1);\n      setShowCelebration(true);\n    } else {\n      // Reset selection after a moment\n      setTimeout(() => {\n        setSelectedPicture(null);\n      }, 1500);\n    }\n  };\n\n  // Mutation to record user answers\n  const recordAnswerMutation = useMutation({\n    mutationFn: (answerData: { wordId: string; isCorrect: boolean; sessionId: string }) =>\n      fetch('/api/answers', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(answerData),\n      }).then(res => res.json()),\n    onSuccess: (data, variables) => {\n      // Only invalidate today's progress when answer is correct\n      if (variables.isCorrect) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/progress/today\", sessionId] });\n      }\n    }\n  });\n\n  const handlePictureSelect = (word: Word, isCorrect: boolean) => {\n    // Prevent multiple selections while processing\n    if (selectedPicture || showCelebration) return;\n    \n    setSelectedPicture(word);\n    \n    // Record the answer in the database\n    if (currentWord) {\n      recordAnswerMutation.mutate({\n        wordId: currentWord.id,\n        isCorrect,\n        sessionId,\n      });\n    }\n    \n    if (isCorrect) {\n      setCorrectAnswers(prev => prev + 1);\n      setShowCelebration(true);\n    } else {\n      // Reset selection after a moment\n      setTimeout(() => {\n        setSelectedPicture(null);\n      }, 1500);\n    }\n  };\n\n  const handleLetterSelect = (letter: string, isCorrect: boolean) => {\n    // Prevent multiple selections while processing\n    if (selectedPicture || showCelebration) return;\n    \n    setSelectedPicture({ id: letter, word: letter, image: '', audio: '' } as Word);\n    \n    // Record the answer in the database\n    if (currentWord) {\n      recordAnswerMutation.mutate({\n        wordId: currentWord.id,\n        isCorrect,\n        sessionId,\n      });\n    }\n    \n    if (isCorrect) {\n      setCorrectAnswers(prev => prev + 1);\n      setShowCelebration(true);\n    } else {\n      // Reset selection after a moment\n      setTimeout(() => {\n        setSelectedPicture(null);\n      }, 1500);\n    }\n  };\n\n  const handleLetterRemove = (letterIndex: number, isCorrect: boolean) => {\n    // Prevent multiple selections while processing\n    if (selectedPicture || showCelebration) return;\n    \n    setSelectedPicture({ id: `remove-${letterIndex}`, word: `remove-${letterIndex}`, image: '', audio: '' } as Word);\n    \n    // Record the answer in the database\n    if (currentWord) {\n      recordAnswerMutation.mutate({\n        wordId: currentWord.id,\n        isCorrect,\n        sessionId,\n      });\n    }\n    \n    if (isCorrect) {\n      setCorrectAnswers(prev => prev + 1);\n      setShowCelebration(true);\n    } else {\n      // Reset selection after a moment\n      setTimeout(() => {\n        setSelectedPicture(null);\n      }, 1500);\n    }\n  };\n\n  const handleWordComplete = (isCorrect: boolean) => {\n    // Prevent multiple selections while processing\n    if (selectedPicture || showCelebration) return;\n    \n    setSelectedPicture({ id: 'spell-complete', word: 'spell-complete', image: '', audio: '' } as Word);\n    \n    // Record the answer in the database\n    if (currentWord) {\n      recordAnswerMutation.mutate({\n        wordId: currentWord.id,\n        isCorrect,\n        sessionId,\n      });\n    }\n    \n    if (isCorrect) {\n      setCorrectAnswers(prev => prev + 1);\n      setShowCelebration(true);\n    } else {\n      // Reset selection after a moment\n      setTimeout(() => {\n        setSelectedPicture(null);\n      }, 1500);\n    }\n  };\n\n  const handleNextWord = () => {\n    setShowCelebration(false);\n    setSelectedPicture(null);\n    \n    // Invalidate words query to get updated list (after celebration is done)\n    queryClient.invalidateQueries({ queryKey: [\"/api/words\", sessionId] });\n    \n    if (currentWordIndex + 1 >= words.length) {\n      setGameCompleted(true);\n    } else {\n      setCurrentWordIndex(prev => prev + 1);\n    }\n  };\n\n  const handleSettingsClick = () => {\n    toast({\n      title: \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß\",\n      description: \"–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å\",\n      action: (\n        <button\n          onClick={handleResetProgress}\n          className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded text-sm\"\n        >\n          –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n        </button>\n      ),\n    });\n  };\n\n  const handleRestartGame = () => {\n    setCurrentWordIndex(0);\n    setCorrectAnswers(0);\n    setShowCelebration(false);\n    setGameCompleted(false);\n    setSelectedPicture(null);\n  };\n\n  const handleResetProgress = () => {\n    // Clear the session from localStorage to start fresh\n    localStorage.removeItem('russian-game-session');\n    // Reload the page to get a new session\n    window.location.reload();\n  };\n\n  const handleGameTypeChange = (newGameType: GameType) => {\n    setGameType(newGameType);\n    setSelectedPicture(null);\n    setShowCelebration(false);\n  };\n\n  if (wordsLoading || progressLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <motion.div\n            className=\"text-6xl mb-4\"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n          >\n            üìö\n          </motion.div>\n          <p className=\"text-2xl font-bold text-child-text\">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameCompleted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <motion.div \n          className=\"text-center bg-white rounded-3xl p-8 shadow-2xl mx-4 max-w-md\"\n          initial={{ scale: 0.5, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n        >\n          <div className=\"text-8xl mb-6\">üèÜ</div>\n          <h1 className=\"text-4xl font-bold text-primary mb-4\">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>\n          <p className=\"text-2xl text-child-text mb-4\">\n            –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —Å–ª–æ–≤–∞!\n          </p>\n          <p className=\"text-xl text-secondary mb-6 font-semibold\">\n            –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {todayProgress?.correctAnswersToday || 0}\n          </p>\n          \n          <div className=\"space-y-4\">\n            <motion.button\n              onClick={handleRestartGame}\n              className=\"w-full bg-primary hover:bg-purple-700 text-white font-bold py-4 px-8 rounded-full text-xl transition-colors duration-200\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞! üéÆ\n            </motion.button>\n          </div>\n        </motion.div>\n      </div>\n    );\n  }\n\n  // Show loading only if we don't have the current word at all\n  const isInitialLoading = !currentWord;\n    \n  if (isInitialLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-4xl mb-4\">‚è≥</div>\n          <p className=\"text-xl text-child-text\">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col overflow-hidden\">\n      <GameHeader\n        currentWordIndex={currentWordIndex}\n        totalWords={words.length}\n        correctAnswersToday={todayProgress?.correctAnswersToday || 0}\n        onSettingsClick={handleSettingsClick}\n      />\n\n      <main className=\"flex-1 overflow-y-auto max-w-6xl mx-auto px-4 pb-8 w-full\">\n        <GameMenu \n          currentGameType={gameType}\n          onGameTypeChange={handleGameTypeChange}\n          currentMixType={currentMixType}\n        />\n\n        {gameType === 'picture-match' && (\n          <>\n            <WordDisplay word={currentWord.word} />\n            \n            {distractorsLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-2xl\">‚è≥</div>\n                <p className=\"text-sm text-gray-500\">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...</p>\n              </div>\n            ) : (\n              <PictureGrid\n                correctWord={currentWord}\n                distractors={distractors}\n                onPictureSelect={handlePictureSelect}\n                disabled={!!selectedPicture || showCelebration}\n              />\n            )}\n\n            <div className=\"text-center mt-8\">\n              <motion.div\n                className=\"text-6xl\"\n                animate={{ \n                  rotate: [-10, 10, -10],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ \n                  duration: 2, \n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                üëÜ\n              </motion.div>\n            </div>\n          </>\n        )}\n\n        {gameType === 'missing-letter' && (\n          letterOptionsLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-2xl\">‚è≥</div>\n              <p className=\"text-sm text-gray-500\">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±—É–∫–≤—ã...</p>\n            </div>\n          ) : letterData ? (\n            <MissingLetterGame\n              word={currentWord}\n              letterOptions={letterData.letterOptions}\n              missingLetterIndex={letterData.missingLetterIndex}\n              onLetterSelect={handleLetterSelect}\n              disabled={!!selectedPicture || showCelebration}\n            />\n          ) : null\n        )}\n\n        {gameType === 'extra-letter' && (\n          extraLetterLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-2xl\">‚è≥</div>\n              <p className=\"text-sm text-gray-500\">–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...</p>\n            </div>\n          ) : extraLetterData ? (\n            <ExtraLetterGame\n              word={currentWord}\n              wordWithExtraLetter={extraLetterData.wordWithExtraLetter}\n              extraLetterIndex={extraLetterData.extraLetterIndex}\n              onLetterRemove={handleLetterRemove}\n              disabled={!!selectedPicture || showCelebration}\n            />\n          ) : null\n        )}\n\n        {gameType === 'spell-word' && (\n          spellLettersLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-2xl\">‚è≥</div>\n              <p className=\"text-sm text-gray-500\">–ì–æ—Ç–æ–≤–∏–º –±—É–∫–≤—ã...</p>\n            </div>\n          ) : spellLettersData ? (\n            <SpellWordGame\n              word={currentWord}\n              availableLetters={spellLettersData.availableLetters}\n              onWordComplete={handleWordComplete}\n              disabled={!!selectedPicture || showCelebration}\n            />\n          ) : null\n        )}\n\n        {gameType === 'mix' && (\n          <MixGame\n            word={currentWord}\n            onAnswer={handleMixAnswer}\n            disabled={!!selectedPicture || showCelebration}\n            onMixTypeChange={setCurrentMixType}\n          />\n        )}\n      </main>\n\n      <CelebrationOverlay\n        key={`celebration-${currentWord?.id}-${correctAnswers}`}\n        isVisible={showCelebration}\n        onNext={handleNextWord}\n      />\n    </div>\n  );\n}\n","size_bytes":16010},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}